/*
 *
 * Copyright (c) 2013 Centro de Competitividad México
 * Todos los Derechos Reservados.
 *
 * Este software es confidencial y de uso exclusivo del
 * Centro de Competitividad México.
 *
 */
package mx.com.vgati.ccmx.vinculacion.pymes.dao.imp;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.StringTokenizer;

import mx.com.vgati.ccmx.vinculacion.pymes.dao.PyMEsDao;
import mx.com.vgati.ccmx.vinculacion.pymes.dto.Asistentes;
import mx.com.vgati.ccmx.vinculacion.pymes.dto.Certificaciones;
import mx.com.vgati.ccmx.vinculacion.pymes.dto.Clientes;
import mx.com.vgati.ccmx.vinculacion.pymes.dto.Productos;
import mx.com.vgati.ccmx.vinculacion.pymes.dto.PyMEs;
import mx.com.vgati.ccmx.vinculacion.pymes.dto.ServiciosConsultoria;
import mx.com.vgati.ccmx.vinculacion.pymes.dto.ServiciosDiplomado;
import mx.com.vgati.ccmx.vinculacion.tractoras.dto.Domicilios;
import mx.com.vgati.ccmx.vinculacion.tractoras.dto.Tractoras;
import mx.com.vgati.framework.dao.VinculacionBaseJdbcDao;
import mx.com.vgati.framework.dao.exception.DaoException;
import mx.com.vgati.framework.dao.exception.JdbcDaoException;
import mx.com.vgati.framework.dto.Contacto;
import mx.com.vgati.framework.dto.Diplomado;
import mx.com.vgati.framework.dto.Documento;
import mx.com.vgati.framework.dto.Mensaje;
import mx.com.vgati.framework.dto.Requerimientos;
import mx.com.vgati.framework.dto.Respuesta;
import mx.com.vgati.framework.util.Null;

import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowMapper;

public class PyMEsDaoJdbcImp extends VinculacionBaseJdbcDao implements PyMEsDao {

	@SuppressWarnings("unchecked")
	@Override
	public PyMEs getPyMEs(int id) throws DaoException {
		log.debug("getPyMEs()");

		PyMEs result = null;
		StringBuffer query = new StringBuffer();
		query.append("SELECT ");
		query.append("ID_USUARIO, ");
		query.append("ID_USUARIO_PADRE, ");
		query.append("PERSONALIDAD_JURIDICA, ");
		query.append("CASE RFC WHEN 'null' THEN '' ELSE RFC END AS RFC, ");
		query.append("CORREO_ELECTRONICO, ");
		query.append("NOMBRE_COMERCIAL, ");
		query.append("CASE NOMBRE_FISCAL WHEN 'null' THEN '' ELSE NOMBRE_FISCAL END AS NOMBRE_FISCAL, ");
		query.append("NUMERO_EMPLEADOS, ");
		query.append("CASE MENSAJE_VENTAS WHEN 'null' THEN '' ELSE MENSAJE_VENTAS END AS MENSAJE_VENTAS, ");
		query.append("CASE PAGINA_WEB WHEN 'null' THEN ' ' ELSE PAGINA_WEB END AS PAGINA_WEB, ");
		query.append("VENTAS_ANUALES, ");
		query.append("CVE_SCIAN, ");
		query.append("CASE INSTITUTO_CERTIFICADOR WHEN 'null' THEN '' ELSE INSTITUTO_CERTIFICADOR END AS INSTITUTO_CERTIFICADOR, ");
		query.append("B_DIPLOMADO_CCMX_UNO, ");
		query.append("B_DIPLOMADO_CCMX_DOS, ");
		query.append("B_DIPLOMADO_CCMX_TRES, ");
		query.append("B_DIPLOMADO_CCMX_CUATRO, ");
		query.append("B_RECIBE_REQUERIMIENTOS_COMPRA, ");
		query.append("CVE_SCIAN_REQUERIMIENTOS_COMPRA, ");
		query.append("CALIFICACION, ");
		query.append("B_SERVICIOS_CCMX_DIPLOMADOS, ");
		query.append("B_SERVICIOS_CCMX_CONSULTORIA, ");
		query.append("B_PRIMER_NIVEL, ");
		query.append("B_SEGUNDO_NIVEL, ");
		query.append("B_TERCER_NIVEL, ");
		query.append("B_AGUASCALIENTES, ");
		query.append("B_BAJA_CALIFORNIA_SUR, ");
		query.append("B_BAJA_CALIFORNIA_NORTE, ");
		query.append("B_CAMPECHE, ");
		query.append("B_CHIAPAS, ");
		query.append("B_CHIHUAHUA, ");
		query.append("B_COAHUILA, ");
		query.append("B_COLIMA, ");
		query.append("B_DISTRITO_FEDERAL, ");
		query.append("B_DURANGO, ");
		query.append("B_GUANAJUATO, ");
		query.append("B_GUERRERO, ");
		query.append("B_HIDALGO, ");
		query.append("B_JALISCO, ");
		query.append("B_MEXICO, ");
		query.append("B_MICHOACAN, ");
		query.append("B_MORELOS, ");
		query.append("B_NAYARIT, ");
		query.append("B_NUEVO_LEON, ");
		query.append("B_OAXACA, ");
		query.append("B_PUEBLA, ");
		query.append("B_QUERETARO, ");
		query.append("B_QUINTANA_ROO, ");
		query.append("B_SAN_LUIS_POTOSI, ");
		query.append("B_SINALOA, ");
		query.append("B_SONORA, ");
		query.append("B_TABASCO, ");
		query.append("B_TAMAULIPAS, ");
		query.append("B_TLAXCALA, ");
		query.append("B_VERACRUZ, ");
		query.append("B_YUCATAN, ");
		query.append("B_ZACATECAS, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 1, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 0 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO1, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 2, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 1 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO2, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 3, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 2 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO3, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 4, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 3 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO4, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 5, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 4 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO5, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 6, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 5 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO6, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 7, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 6 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO7, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 8, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 7 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO8, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 9, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 8 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO9, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 10, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 9 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO10, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 11, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 10 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO11, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 12, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 11 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO12, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 13, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 12 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO13, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 14, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 13 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO14, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 15, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 14 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO15, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 16, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 15 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO16, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 17, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 16 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO17, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 18, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 17 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO18, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 19, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 18 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO19, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 20, ");
		query.append("(SELECT MIN(ID_PRODUCTO) + 19 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_PRODUCTO20, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 1, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 0 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO1, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 2, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 1 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO2, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 3, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 2 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO3, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 4, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 3 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO4, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 5, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 4 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO5, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 6, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 5 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO6, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 7, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 6 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO7, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 8, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 7 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO8, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 9, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 8 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO9, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 10, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 9 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO10, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 11, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 10 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO11, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 12, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 11 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO12, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 13, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 12 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO13, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 14, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 13 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO14, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 15, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 14 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO15, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 16, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 15 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO16, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 17, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 16 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO17, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 18, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 17 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO18, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 19, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 18 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO19, ");
		query.append("CASEWHEN((SELECT COUNT(ID_PRODUCTO) FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 20, ");
		query.append("( SELECT PRODUCTO FROM INFRA.PRODUCTOS WHERE ID_PRODUCTO= ( SELECT MIN(ID_PRODUCTO) + 19 FROM INFRA.PRODUCTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTO20, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CONTACTO) FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 1, ");
		query.append("( SELECT MIN(ID_CONTACTO) + 0 FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_CONTACTO1, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CONTACTO) FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 2, ");
		query.append("( SELECT MIN(ID_CONTACTO) + 1 FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_CONTACTO2, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CONTACTO) FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 1,  ");
		query.append("( SELECT TIPO FROM INFRA.CONTACTOS WHERE ID_CONTACTO = ( SELECT MIN(ID_CONTACTO) + 0 FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS TIPO1, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CONTACTO) FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 2, ");
		query.append("( SELECT TIPO FROM INFRA.CONTACTOS WHERE ID_CONTACTO = ( SELECT MIN(ID_CONTACTO) + 1 FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS TIPO2, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CONTACTO) FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 1, ");
		query.append("( SELECT NOMBRE FROM INFRA.CONTACTOS WHERE ID_CONTACTO = ( SELECT MIN(ID_CONTACTO) + 0 FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS NOMBRE1, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CONTACTO) FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 2, ");
		query.append("( SELECT NOMBRE FROM INFRA.CONTACTOS WHERE ID_CONTACTO = ( SELECT MIN(ID_CONTACTO) + 1 FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS NOMBRE2, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CONTACTO) FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 1, ");
		query.append("( SELECT APELLIDO_PATERNO FROM INFRA.CONTACTOS WHERE ID_CONTACTO = ( SELECT MIN(ID_CONTACTO) + 0 FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS APELLIDO_PATERNO1, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CONTACTO) FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 2, ");
		query.append("( SELECT APELLIDO_PATERNO FROM INFRA.CONTACTOS WHERE ID_CONTACTO = ( SELECT MIN(ID_CONTACTO) + 1 FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS APELLIDO_PATERNO2, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CONTACTO) FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 1, ");
		query.append("( SELECT APELLIDO_MATERNO FROM INFRA.CONTACTOS WHERE ID_CONTACTO = ( SELECT MIN(ID_CONTACTO) + 0 FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS APELLIDO_MATERNO1, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CONTACTO) FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 2, ");
		query.append("( SELECT APELLIDO_MATERNO FROM INFRA.CONTACTOS WHERE ID_CONTACTO = ( SELECT MIN(ID_CONTACTO) + 1 FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS APELLIDO_MATERNO2, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CONTACTO) FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 1, ");
		query.append("( SELECT CORREO_ELECTRONICO FROM INFRA.CONTACTOS WHERE ID_CONTACTO = ( SELECT MIN(ID_CONTACTO) + 0 FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS CORREO_ELECTRONICO1, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CONTACTO) FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 2, ");
		query.append("( SELECT CORREO_ELECTRONICO FROM INFRA.CONTACTOS WHERE ID_CONTACTO = ( SELECT MIN(ID_CONTACTO) + 1 FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS CORREO_ELECTRONICO2, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CONTACTO) FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 1, ");
		query.append("( SELECT TELEFONO FROM INFRA.CONTACTOS WHERE ID_CONTACTO = ( SELECT MIN(ID_CONTACTO) + 0 FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS TELEFONO1, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CONTACTO) FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO) >= 2, ");
		query.append("( SELECT TELEFONO FROM INFRA.CONTACTOS WHERE ID_CONTACTO = ( SELECT MIN(ID_CONTACTO) + 1 FROM INFRA.CONTACTOS WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS TELEFONO2, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO) >= 1, ");
		query.append("(SELECT MIN(ID_CLIENTE) + 0 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_CLIENTE1, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO) >= 2, ");
		query.append("(SELECT MIN(ID_CLIENTE) + 1 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_CLIENTE2, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO) >= 3, ");
		query.append("(SELECT MIN(ID_CLIENTE) + 2 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_CLIENTE3, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO) >= 4, ");
		query.append("(SELECT MIN(ID_CLIENTE) + 3 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_CLIENTE4, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO) >= 5, ");
		query.append("(SELECT MIN(ID_CLIENTE) + 4 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_CLIENTE5, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 1, ");
		query.append("( SELECT CLIENTE FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 0 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS CLIENTE1, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 2, ");
		query.append("( SELECT CLIENTE FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 1 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS CLIENTE2, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 3, ");
		query.append("( SELECT CLIENTE FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 2 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS CLIENTE3, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 4, ");
		query.append("( SELECT CLIENTE FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 3 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS CLIENTE4, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 5, ");
		query.append("( SELECT CLIENTE FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 4 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS CLIENTE5, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 1, ");
		query.append("( SELECT PRODUCTOS_COMPRA FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 0 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTOS_COMPRA_1, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 2, ");
		query.append("( SELECT PRODUCTOS_COMPRA FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 1 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTOS_COMPRA_2, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 3, ");
		query.append("( SELECT PRODUCTOS_COMPRA FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 2 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTOS_COMPRA_3, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 4, ");
		query.append("( SELECT PRODUCTOS_COMPRA FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 3 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTOS_COMPRA_4, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 5, ");
		query.append("( SELECT PRODUCTOS_COMPRA FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 4 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS PRODUCTOS_COMPRA_5, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 1, ");
		query.append("( SELECT ANIOS_PROVEEDOR FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 0 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS ANIOS_PROVEEDOR_1, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 2, ");
		query.append("( SELECT ANIOS_PROVEEDOR FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 1 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS ANIOS_PROVEEDOR_2, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 3, ");
		query.append("( SELECT ANIOS_PROVEEDOR FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 2 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS ANIOS_PROVEEDOR_3, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 4, ");
		query.append("( SELECT ANIOS_PROVEEDOR FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 3 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS ANIOS_PROVEEDOR_4, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 5, ");
		query.append("( SELECT ANIOS_PROVEEDOR FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 4 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS ANIOS_PROVEEDOR_5, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 1, ");
		query.append("( SELECT MESES_PROVEEDOR FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 0 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS MESES_PROVEEDOR_1, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 2, ");
		query.append("( SELECT MESES_PROVEEDOR FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 1 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS MESES_PROVEEDOR_2, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 3, ");
		query.append("( SELECT MESES_PROVEEDOR FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 2 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS MESES_PROVEEDOR_3, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 4, ");
		query.append("( SELECT MESES_PROVEEDOR FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 3 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS MESES_PROVEEDOR_4, ");
		query.append("CASEWHEN((SELECT COUNT(ID_CLIENTE) FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO ) >= 5, ");
		query.append("( SELECT MESES_PROVEEDOR FROM INFRA.CLIENTES WHERE ID_CLIENTE= ( SELECT MIN(ID_CLIENTE) + 4 FROM INFRA.CLIENTES WHERE ID_USUARIO = P.ID_USUARIO )), NULL) AS MESES_PROVEEDOR_5, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 1, ");
		query.append("(SELECT MIN(ID_ARCHIVO) + 0 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_DOC1, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 2, ");
		query.append("(SELECT MIN(ID_ARCHIVO) + 1 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_DOC2, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 3, ");
		query.append("(SELECT MIN(ID_ARCHIVO) + 2 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_DOC3, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 4, ");
		query.append("(SELECT MIN(ID_ARCHIVO) + 3 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_DOC4, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 5, ");
		query.append("(SELECT MIN(ID_ARCHIVO) + 4 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_DOC5, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 6, ");
		query.append("(SELECT MIN(ID_ARCHIVO) + 5 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_DOC6, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 7, ");
		query.append("(SELECT MIN(ID_ARCHIVO) + 6 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_DOC7, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 8, ");
		query.append("(SELECT MIN(ID_ARCHIVO) + 7 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_DOC8, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 9, ");
		query.append("(SELECT MIN(ID_ARCHIVO) + 8 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_DOC9, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 10, ");
		query.append("(SELECT MIN(ID_ARCHIVO) + 9 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO), '0') AS ID_DOC10, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 1, ");
		query.append("( SELECT NOMBRE FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 0 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS NAME_DOC1, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 2, ");
		query.append("( SELECT NOMBRE FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 1 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS NAME_DOC2, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 3, ");
		query.append("( SELECT NOMBRE FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 2 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS NAME_DOC3, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 4, ");
		query.append("( SELECT NOMBRE FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 3 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS NAME_DOC4, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 5, ");
		query.append("( SELECT NOMBRE FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 4 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS NAME_DOC5, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 6, ");
		query.append("( SELECT NOMBRE FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 5 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS NAME_DOC6, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 7, ");
		query.append("( SELECT NOMBRE FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 6 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS NAME_DOC7, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 8, ");
		query.append("( SELECT NOMBRE FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 7 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS NAME_DOC8, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 9, ");
		query.append("( SELECT NOMBRE FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 8 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS NAME_DOC9, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 10, ");
		query.append("( SELECT NOMBRE FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 9 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS NAME_DOC10, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 1, ");
		query.append("( SELECT DESCRIPCION_ARCHIVO FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 0 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS DESCRIPCION_ARCHIVO1, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 2, ");
		query.append("( SELECT DESCRIPCION_ARCHIVO FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 1 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS DESCRIPCION_ARCHIVO2, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 3, ");
		query.append("( SELECT DESCRIPCION_ARCHIVO FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 2 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS DESCRIPCION_ARCHIVO3, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 4, ");
		query.append("( SELECT DESCRIPCION_ARCHIVO FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 3 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS DESCRIPCION_ARCHIVO4, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 5, ");
		query.append("( SELECT DESCRIPCION_ARCHIVO FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 4 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS DESCRIPCION_ARCHIVO5, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 6, ");
		query.append("( SELECT DESCRIPCION_ARCHIVO FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 5 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS DESCRIPCION_ARCHIVO6, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 7, ");
		query.append("( SELECT DESCRIPCION_ARCHIVO FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 6 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS DESCRIPCION_ARCHIVO7, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 8, ");
		query.append("( SELECT DESCRIPCION_ARCHIVO FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 7 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS DESCRIPCION_ARCHIVO8, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 9, ");
		query.append("( SELECT DESCRIPCION_ARCHIVO FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 8 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS DESCRIPCION_ARCHIVO9, ");
		query.append("CASEWHEN((SELECT COUNT(ID_ARCHIVO) FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO) >= 10, ");
		query.append("( SELECT DESCRIPCION_ARCHIVO FROM INFRA.ARCHIVOS WHERE ID_ARCHIVO = ( SELECT MIN(ID_ARCHIVO) + 9 FROM INFRA.ARCHIVOS WHERE ID_USUARIO = P.ID_USUARIO)), NULL) AS DESCRIPCION_ARCHIVO10 ");
		query.append("FROM INFRA.PYMES AS P ");
		query.append("WHERE ID_USUARIO = ? ");
		log.debug("query=" + query);
		log.debug(id);

		Object[] o = { id };
		result = (PyMEs) getJdbcTemplate().queryForObject(query.toString(), o,
				new PyMEsRowMapper());

		log.debug("result=" + result);
		return result;
	}

	@SuppressWarnings("rawtypes")
	public class PyMEsRowMapper implements RowMapper {

		@Override
		public Object mapRow(ResultSet rs, int ln) throws SQLException {
			PyMEsResultSetExtractor extractor = new PyMEsResultSetExtractor();
			return extractor.extractData(rs);
		}

	}

	@SuppressWarnings("rawtypes")
	public class PyMEsResultSetExtractor implements ResultSetExtractor {

		@Override
		public Object extractData(ResultSet rs) throws SQLException,
				DataAccessException {
			PyMEs pymes = new PyMEs();
			pymes.setIdUsuario(rs.getInt("ID_USUARIO"));
			pymes.setIdUsuarioPadre(rs.getInt("ID_USUARIO_PADRE"));
			pymes.setPersonalidadJuridica(rs.getString("PERSONALIDAD_JURIDICA"));
			pymes.setRfc(rs.getString("RFC"));
			pymes.setCorreoElectronico(rs.getString("CORREO_ELECTRONICO"));
			pymes.setNombreComercial(rs.getString("NOMBRE_COMERCIAL"));
			pymes.setNombreFiscal(rs.getString("NOMBRE_FISCAL"));
			pymes.setNumeroEmpleados(rs.getInt("NUMERO_EMPLEADOS"));
			pymes.setMensajeVentas(rs.getString("MENSAJE_VENTAS"));
			pymes.setPaginaWeb(rs.getString("PAGINA_WEB"));
			pymes.setVentasAnuales(rs.getString("VENTAS_ANUALES"));
			pymes.setCveScian(rs.getInt("CVE_SCIAN"));
			pymes.setInstitutoCertificador(rs
					.getString("INSTITUTO_CERTIFICADOR"));
			pymes.setbDiplomadoCcmxUno(rs.getBoolean("B_DIPLOMADO_CCMX_UNO"));
			pymes.setbDiplomadoCcmxDos(rs.getBoolean("B_DIPLOMADO_CCMX_DOS"));
			pymes.setbDiplomadoCcmxTres(rs.getBoolean("B_DIPLOMADO_CCMX_TRES"));
			pymes.setbDiplomadoCcmxCuatro(rs
					.getBoolean("B_DIPLOMADO_CCMX_CUATRO"));
			pymes.setbRecibeRequerimientosCompra(rs
					.getBoolean("B_RECIBE_REQUERIMIENTOS_COMPRA"));
			pymes.setCveScianRequerimientosCompra(rs
					.getInt("CVE_SCIAN_REQUERIMIENTOS_COMPRA"));
			pymes.setCalificacion(rs.getString("CALIFICACION"));
			pymes.setbServiciosCcmxDiplomados(rs
					.getBoolean("B_SERVICIOS_CCMX_DIPLOMADOS"));
			pymes.setbServiciosCcmxConsultoria(rs
					.getBoolean("B_SERVICIOS_CCMX_CONSULTORIA"));
			pymes.setbPrimerNivel(rs.getBoolean("B_PRIMER_NIVEL"));
			pymes.setbSegundoNivel(rs.getBoolean("B_SEGUNDO_NIVEL"));
			pymes.setbTercerNivel(rs.getBoolean("B_TERCER_NIVEL"));
			pymes.setbAguascalientes(rs.getBoolean("B_AGUASCALIENTES"));
			pymes.setbBajaCaliforniaSur(rs.getBoolean("B_BAJA_CALIFORNIA_SUR"));
			pymes.setbBajaCaliforniaNorte(rs
					.getBoolean("B_BAJA_CALIFORNIA_NORTE"));
			pymes.setbCampeche(rs.getBoolean("B_CAMPECHE"));
			pymes.setbChiapas(rs.getBoolean("B_CHIAPAS"));
			pymes.setbChihuahua(rs.getBoolean("B_CHIHUAHUA"));
			pymes.setbCoahuila(rs.getBoolean("B_COAHUILA"));
			pymes.setbColima(rs.getBoolean("B_COLIMA"));
			pymes.setbDistritoFederal(rs.getBoolean("B_DISTRITO_FEDERAL"));
			pymes.setbDurango(rs.getBoolean("B_DURANGO"));
			pymes.setbGuanajuato(rs.getBoolean("B_GUANAJUATO"));
			pymes.setbGuerrero(rs.getBoolean("B_GUERRERO"));
			pymes.setbHidalgo(rs.getBoolean("B_HIDALGO"));
			pymes.setbJalisco(rs.getBoolean("B_JALISCO"));
			pymes.setbMexico(rs.getBoolean("B_MEXICO"));
			pymes.setbMichoacan(rs.getBoolean("B_MICHOACAN"));
			pymes.setbMorelos(rs.getBoolean("B_MORELOS"));
			pymes.setbNayarit(rs.getBoolean("B_NAYARIT"));
			pymes.setbNuevoLeon(rs.getBoolean("B_NUEVO_LEON"));
			pymes.setbOaxaca(rs.getBoolean("B_OAXACA"));
			pymes.setbPuebla(rs.getBoolean("B_PUEBLA"));
			pymes.setbQueretaro(rs.getBoolean("B_QUERETARO"));
			pymes.setbQuintanaRoo(rs.getBoolean("B_QUINTANA_ROO"));
			pymes.setbSanLuisPotosi(rs.getBoolean("B_SAN_LUIS_POTOSI"));
			pymes.setbSinaloa(rs.getBoolean("B_SINALOA"));
			pymes.setbSonora(rs.getBoolean("B_SONORA"));
			pymes.setbTabasco(rs.getBoolean("B_TABASCO"));
			pymes.setbTamaulipas(rs.getBoolean("B_TAMAULIPAS"));
			pymes.setbTlaxcala(rs.getBoolean("B_TLAXCALA"));
			pymes.setbVeracruz(rs.getBoolean("B_VERACRUZ"));
			pymes.setbYucatan(rs.getBoolean("B_YUCATAN"));
			pymes.setbZacatecas(rs.getBoolean("B_ZACATECAS"));
			pymes.setIdProducto1(rs.getInt("ID_PRODUCTO1"));
			pymes.setIdProducto2(rs.getInt("ID_PRODUCTO2"));
			pymes.setIdProducto3(rs.getInt("ID_PRODUCTO3"));
			pymes.setIdProducto4(rs.getInt("ID_PRODUCTO4"));
			pymes.setIdProducto5(rs.getInt("ID_PRODUCTO5"));
			pymes.setIdProducto6(rs.getInt("ID_PRODUCTO6"));
			pymes.setIdProducto7(rs.getInt("ID_PRODUCTO7"));
			pymes.setIdProducto8(rs.getInt("ID_PRODUCTO8"));
			pymes.setIdProducto9(rs.getInt("ID_PRODUCTO9"));
			pymes.setIdProducto10(rs.getInt("ID_PRODUCTO10"));
			pymes.setIdProducto11(rs.getInt("ID_PRODUCTO11"));
			pymes.setIdProducto12(rs.getInt("ID_PRODUCTO12"));
			pymes.setIdProducto13(rs.getInt("ID_PRODUCTO13"));
			pymes.setIdProducto14(rs.getInt("ID_PRODUCTO14"));
			pymes.setIdProducto15(rs.getInt("ID_PRODUCTO15"));
			pymes.setIdProducto16(rs.getInt("ID_PRODUCTO16"));
			pymes.setIdProducto17(rs.getInt("ID_PRODUCTO17"));
			pymes.setIdProducto18(rs.getInt("ID_PRODUCTO18"));
			pymes.setIdProducto19(rs.getInt("ID_PRODUCTO19"));
			pymes.setIdProducto20(rs.getInt("ID_PRODUCTO20"));
			pymes.setProducto1(rs.getString("PRODUCTO1"));
			pymes.setProducto2(rs.getString("PRODUCTO2"));
			pymes.setProducto3(rs.getString("PRODUCTO3"));
			pymes.setProducto4(rs.getString("PRODUCTO4"));
			pymes.setProducto5(rs.getString("PRODUCTO5"));
			pymes.setProducto6(rs.getString("PRODUCTO6"));
			pymes.setProducto7(rs.getString("PRODUCTO7"));
			pymes.setProducto8(rs.getString("PRODUCTO8"));
			pymes.setProducto9(rs.getString("PRODUCTO9"));
			pymes.setProducto10(rs.getString("PRODUCTO10"));
			pymes.setProducto11(rs.getString("PRODUCTO11"));
			pymes.setProducto12(rs.getString("PRODUCTO12"));
			pymes.setProducto13(rs.getString("PRODUCTO13"));
			pymes.setProducto14(rs.getString("PRODUCTO14"));
			pymes.setProducto15(rs.getString("PRODUCTO15"));
			pymes.setProducto16(rs.getString("PRODUCTO16"));
			pymes.setProducto17(rs.getString("PRODUCTO17"));
			pymes.setProducto18(rs.getString("PRODUCTO18"));
			pymes.setProducto19(rs.getString("PRODUCTO19"));
			pymes.setProducto20(rs.getString("PRODUCTO20"));
			pymes.setIdContacto1(rs.getInt("ID_CONTACTO1"));
			pymes.setIdContacto2(rs.getInt("ID_CONTACTO2"));
			pymes.setTipoContacto1(rs.getString("TIPO1"));
			pymes.setTipoContacto2(rs.getString("TIPO2"));
			pymes.setNombreContacto1(rs.getString("NOMBRE1"));
			pymes.setNombreContacto2(rs.getString("NOMBRE2"));
			pymes.setAppPaterno1(rs.getString("APELLIDO_PATERNO1"));
			pymes.setAppPaterno2(rs.getString("APELLIDO_PATERNO2"));
			pymes.setAppMaterno1(rs.getString("APELLIDO_MATERNO1"));
			pymes.setAppMaterno2(rs.getString("APELLIDO_MATERNO2"));
			pymes.setCorreoElectronicoContacto1(rs
					.getString("CORREO_ELECTRONICO1"));
			pymes.setCorreoElectronicoContacto2(rs
					.getString("CORREO_ELECTRONICO2"));
			pymes.setTelefonoContacto1(rs.getString("TELEFONO1"));
			pymes.setTelefonoContacto2(rs.getString("TELEFONO2"));
			pymes.setIdCliente1(rs.getInt("ID_CLIENTE1"));
			pymes.setIdCliente2(rs.getInt("ID_CLIENTE2"));
			pymes.setIdCliente3(rs.getInt("ID_CLIENTE3"));
			pymes.setIdCliente4(rs.getInt("ID_CLIENTE4"));
			pymes.setIdCliente5(rs.getInt("ID_CLIENTE5"));
			pymes.setCliente1(rs.getString("CLIENTE1"));
			pymes.setCliente2(rs.getString("CLIENTE2"));
			pymes.setCliente3(rs.getString("CLIENTE3"));
			pymes.setCliente4(rs.getString("CLIENTE4"));
			pymes.setCliente5(rs.getString("CLIENTE5"));
			pymes.setProductosCompra1(rs.getString("PRODUCTOS_COMPRA_1"));
			pymes.setProductosCompra2(rs.getString("PRODUCTOS_COMPRA_2"));
			pymes.setProductosCompra3(rs.getString("PRODUCTOS_COMPRA_3"));
			pymes.setProductosCompra4(rs.getString("PRODUCTOS_COMPRA_4"));
			pymes.setProductosCompra5(rs.getString("PRODUCTOS_COMPRA_5"));
			pymes.setAniosProveedor1(rs.getString("ANIOS_PROVEEDOR_1"));
			pymes.setAniosProveedor2(rs.getString("ANIOS_PROVEEDOR_2"));
			pymes.setAniosProveedor3(rs.getString("ANIOS_PROVEEDOR_3"));
			pymes.setAniosProveedor4(rs.getString("ANIOS_PROVEEDOR_4"));
			pymes.setAniosProveedor5(rs.getString("ANIOS_PROVEEDOR_5"));
			pymes.setMesesProveedor1(rs.getString("MESES_PROVEEDOR_1"));
			pymes.setMesesProveedor2(rs.getString("MESES_PROVEEDOR_2"));
			pymes.setMesesProveedor3(rs.getString("MESES_PROVEEDOR_3"));
			pymes.setMesesProveedor4(rs.getString("MESES_PROVEEDOR_4"));
			pymes.setMesesProveedor5(rs.getString("MESES_PROVEEDOR_5"));
			pymes.setIdArchivo1(rs.getInt("ID_DOC1"));
			pymes.setIdArchivo2(rs.getInt("ID_DOC2"));
			pymes.setIdArchivo3(rs.getInt("ID_DOC3"));
			pymes.setIdArchivo4(rs.getInt("ID_DOC4"));
			pymes.setIdArchivo5(rs.getInt("ID_DOC5"));
			pymes.setIdArchivo6(rs.getInt("ID_DOC6"));
			pymes.setIdArchivo7(rs.getInt("ID_DOC7"));
			pymes.setIdArchivo8(rs.getInt("ID_DOC8"));
			pymes.setIdArchivo9(rs.getInt("ID_DOC9"));
			pymes.setIdArchivo10(rs.getInt("ID_DOC10"));
			pymes.setArchivo1FileName(rs.getString("NAME_DOC1"));
			pymes.setArchivo2FileName(rs.getString("NAME_DOC2"));
			pymes.setArchivo3FileName(rs.getString("NAME_DOC3"));
			pymes.setArchivo4FileName(rs.getString("NAME_DOC4"));
			pymes.setArchivo5FileName(rs.getString("NAME_DOC5"));
			pymes.setArchivo6FileName(rs.getString("NAME_DOC6"));
			pymes.setArchivo7FileName(rs.getString("NAME_DOC7"));
			pymes.setArchivo8FileName(rs.getString("NAME_DOC8"));
			pymes.setArchivo9FileName(rs.getString("NAME_DOC9"));
			pymes.setArchivo10FileName(rs.getString("NAME_DOC10"));
			pymes.setDescArchivo1(rs.getString("DESCRIPCION_ARCHIVO1"));
			pymes.setDescArchivo2(rs.getString("DESCRIPCION_ARCHIVO2"));
			pymes.setDescArchivo3(rs.getString("DESCRIPCION_ARCHIVO3"));
			pymes.setDescArchivo4(rs.getString("DESCRIPCION_ARCHIVO4"));
			pymes.setDescArchivo5(rs.getString("DESCRIPCION_ARCHIVO5"));
			pymes.setDescArchivo6(rs.getString("DESCRIPCION_ARCHIVO6"));
			pymes.setDescArchivo7(rs.getString("DESCRIPCION_ARCHIVO7"));
			pymes.setDescArchivo8(rs.getString("DESCRIPCION_ARCHIVO8"));
			pymes.setDescArchivo9(rs.getString("DESCRIPCION_ARCHIVO9"));
			pymes.setDescArchivo10(rs.getString("DESCRIPCION_ARCHIVO10"));
			return pymes;
		}
	}

	@SuppressWarnings("unchecked")
	public String getIdDomicilio(int id) throws DaoException {
		log.debug("getIdDomicilio()");

		String result;
		StringBuffer query = new StringBuffer();

		query.append("SELECT ");
		query.append("ID_DOMICILIO ");
		query.append("FROM INFRA.REL_DOMICILIOS_USUARIO ");
		query.append("WHERE ID_USUARIO = " + id);
		log.debug("query=" + query);

		try {
			result = (String) getJdbcTemplate().queryForObject(
					query.toString(), new IdDomicilioRowMapper());
		} catch (Exception e) {
			result = "0";
		}

		log.debug("result=" + result);
		return result;
	}

	@SuppressWarnings("rawtypes")
	public class IdDomicilioRowMapper implements RowMapper {

		@Override
		public String mapRow(ResultSet rs, int ln) throws SQLException {
			return rs.getString("ID_DOMICILIO");
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public Domicilios getDomicilios(int id) throws DaoException {
		log.debug("getDomicilio()");

		Domicilios result = null;
		StringBuffer query = new StringBuffer();

		query.append("SELECT ");
		query.append("ID_DOMICILIO,");
		query.append("CALLE, ");
		query.append("NUM_EXT, ");
		query.append("NUM_INT, ");
		query.append("PISO, ");
		query.append("COLONIA, ");
		query.append("DELEGACION, ");
		query.append("ESTADO, ");
		query.append("CODIGO_POSTAL ");
		query.append("FROM INFRA.DOMICILIOS ");
		query.append("WHERE ID_DOMICILIO = " + id);
		log.debug("query=" + query);
		log.debug(id);

		if (id == 0)
			return null;
		result = (Domicilios) getJdbcTemplate().queryForObject(
				query.toString(), new DomiciliosRowMapper());

		log.debug("result=" + result);
		return result;
	}

	@SuppressWarnings("rawtypes")
	public class DomiciliosRowMapper implements RowMapper {

		@Override
		public Domicilios mapRow(ResultSet rs, int ln) throws SQLException {
			Domicilios domicilios = new Domicilios();
			domicilios.setIdDomicilio(rs.getInt("ID_DOMICILIO"));
			domicilios.setCalle(rs.getString("CALLE"));
			domicilios.setNumExt(rs.getString("NUM_EXT"));
			domicilios.setNumInt(rs.getString("NUM_INT"));
			domicilios.setPiso(rs.getString("PISO"));
			domicilios.setColonia(rs.getString("COLONIA"));
			domicilios.setDelegacion(rs.getString("DELEGACION"));
			domicilios.setEstado(rs.getString("ESTADO"));
			domicilios.setCodigoPostal(rs.getString("CODIGO_POSTAL"));

			return domicilios;
		}
	}

	@SuppressWarnings("unchecked")
	public String getIdCertificacion(int id) throws DaoException {
		log.debug("getIdCertificacion()");

		String result;
		StringBuffer query = new StringBuffer();

		query.append("SELECT ");
		query.append("ID_CERTIFICADO ");
		query.append("FROM INFRA.CERTIFICACIONES ");
		query.append("WHERE ID_USUARIO = " + id);
		log.debug("query=" + query);

		try {
			result = (String) getJdbcTemplate().queryForObject(
					query.toString(), new IdCertificacionRowMapper());
		} catch (Exception e) {
			result = "0";
		}

		log.debug("result=" + result);
		return result;
	}

	@SuppressWarnings("rawtypes")
	public class IdCertificacionRowMapper implements RowMapper {

		@Override
		public String mapRow(ResultSet rs, int ln) throws SQLException {
			return rs.getString("ID_CERTIFICADO");
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public Certificaciones getCertificaciones(int id) throws DaoException {
		log.debug("getCertificaciones()");

		Certificaciones result = null;
		StringBuffer query = new StringBuffer();

		query.append("SELECT ");
		query.append("ID_CERTIFICADO, ");
		query.append("ID_USUARIO, ");
		query.append("CERTIFICACION, ");
		query.append("FECHA_CERTIFICACION ");
		query.append("FROM INFRA.CERTIFICACIONES ");
		query.append("WHERE ID_CERTIFICADO = " + id);
		log.debug("query=" + query);

		if (id == 0)
			return null;
		result = (Certificaciones) getJdbcTemplate().queryForObject(
				query.toString(), new CertificacionesRowMapper());

		log.debug("result=" + result);
		return result;
	}

	@SuppressWarnings("rawtypes")
	public class CertificacionesRowMapper implements RowMapper {

		@Override
		public Certificaciones mapRow(ResultSet rs, int ln) throws SQLException {
			Certificaciones certificaciones = new Certificaciones();
			certificaciones.setIdCertificado(rs.getInt("ID_CERTIFICADO"));
			certificaciones.setIdUsuario(rs.getInt("ID_USUARIO"));
			certificaciones.setCertificacion(rs.getString("CERTIFICACION"));
			certificaciones.setFechaCertificacion(rs
					.getDate("FECHA_CERTIFICACION"));

			return certificaciones;
		}
	}

	public Mensaje updatePyMEs(PyMEs pyMEs) throws JdbcDaoException {
		log.debug("updatePyMEs()");

		StringBuffer query = new StringBuffer();
		query.append("UPDATE ");
		query.append("INFRA.PYMES SET ");
		query.append("PERSONALIDAD_JURIDICA = '");
		query.append(pyMEs.getPersonalidadJuridica());
		query.append("', ");
		query.append("RFC = '");
		query.append(pyMEs.getRfc());
		query.append("', ");
		query.append("CORREO_ELECTRONICO = '");
		query.append(pyMEs.getCorreoElectronico());
		query.append("', ");
		query.append("NOMBRE_COMERCIAL = '");
		query.append(pyMEs.getNombreComercial());
		query.append("', ");
		query.append("NOMBRE_FISCAL = '");
		query.append(pyMEs.getNombreFiscal());
		query.append("', ");
		query.append("NUMERO_EMPLEADOS = '");
		query.append(pyMEs.getNumeroEmpleados());
		query.append("', ");
		query.append("MENSAJE_VENTAS = '");
		query.append(pyMEs.getMensajeVentas());
		query.append("', ");
		query.append("PAGINA_WEB = '");
		query.append(pyMEs.getPaginaWeb());
		query.append("', ");
		query.append("VENTAS_ANUALES = '");
		query.append(pyMEs.getVentasAnuales());
		query.append("', ");
		query.append("CVE_SCIAN = '");
		query.append(pyMEs.getCveScian());
		query.append("', ");
		query.append("INSTITUTO_CERTIFICADOR = '");
		query.append(pyMEs.getInstitutoCertificador());
		query.append("', ");
		query.append("B_DIPLOMADO_CCMX_UNO = '");
		query.append(pyMEs.isbDiplomadoCcmxUno());
		query.append("', ");
		query.append("B_DIPLOMADO_CCMX_DOS = '");
		query.append(pyMEs.isbDiplomadoCcmxDos());
		query.append("', ");
		query.append("B_DIPLOMADO_CCMX_TRES = '");
		query.append(pyMEs.isbDiplomadoCcmxTres());
		query.append("', ");
		query.append("B_DIPLOMADO_CCMX_CUATRO = '");
		query.append(pyMEs.isbDiplomadoCcmxCuatro());
		query.append("', ");
		query.append("B_RECIBE_REQUERIMIENTOS_COMPRA = '");
		query.append(pyMEs.isbRecibeRequerimientosCompra());
		query.append("', ");
		query.append("CVE_SCIAN_REQUERIMIENTOS_COMPRA = '");
		query.append(pyMEs.getCveScianRequerimientosCompra());
		query.append("', ");
		query.append("CALIFICACION = '");
		query.append(pyMEs.getCalificacion());
		query.append("', ");
		query.append("B_SERVICIOS_CCMX_DIPLOMADOS = '");
		query.append(pyMEs.isbServiciosCcmxDiplomados());
		query.append("', ");
		query.append("B_SERVICIOS_CCMX_CONSULTORIA = '");
		query.append(pyMEs.isbServiciosCcmxConsultoria());
		query.append("', ");
		query.append("B_PRIMER_NIVEL = '");
		query.append(pyMEs.isbPrimerNivel());
		query.append("', ");
		query.append("B_SEGUNDO_NIVEL = '");
		query.append(pyMEs.isbSegundoNivel());
		query.append("', ");
		query.append("B_TERCER_NIVEL = '");
		query.append(pyMEs.isbTercerNivel());
		query.append("', ");
		query.append("B_AGUASCALIENTES = '");
		query.append(pyMEs.isbAguascalientes());
		query.append("', ");
		query.append("B_BAJA_CALIFORNIA_SUR = '");
		query.append(pyMEs.isbBajaCaliforniaSur());
		query.append("', ");
		query.append("B_BAJA_CALIFORNIA_NORTE = '");
		query.append(pyMEs.isbBajaCaliforniaNorte());
		query.append("', ");
		query.append("B_CAMPECHE = '");
		query.append(pyMEs.isbCampeche());
		query.append("', ");
		query.append("B_CHIAPAS = '");
		query.append(pyMEs.isbChiapas());
		query.append("', ");
		query.append("B_CHIHUAHUA = '");
		query.append(pyMEs.isbChihuahua());
		query.append("', ");
		query.append("B_COAHUILA = '");
		query.append(pyMEs.isbCoahuila());
		query.append("', ");
		query.append("B_COLIMA = '");
		query.append(pyMEs.isbColima());
		query.append("', ");
		query.append("B_DISTRITO_FEDERAL = '");
		query.append(pyMEs.isbDistritoFederal());
		query.append("', ");
		query.append("B_DURANGO = '");
		query.append(pyMEs.isbDurango());
		query.append("', ");
		query.append("B_GUANAJUATO = '");
		query.append(pyMEs.isbGuanajuato());
		query.append("', ");
		query.append("B_GUERRERO = '");
		query.append(pyMEs.isbGuerrero());
		query.append("', ");
		query.append("B_HIDALGO = '");
		query.append(pyMEs.isbHidalgo());
		query.append("', ");
		query.append("B_JALISCO = '");
		query.append(pyMEs.isbJalisco());
		query.append("', ");
		query.append("B_MEXICO = '");
		query.append(pyMEs.isbMexico());
		query.append("', ");
		query.append("B_MICHOACAN = '");
		query.append(pyMEs.isbMichoacan());
		query.append("', ");
		query.append("B_MORELOS = '");
		query.append(pyMEs.isbMorelos());
		query.append("', ");
		query.append("B_NAYARIT = '");
		query.append(pyMEs.isbNayarit());
		query.append("', ");
		query.append("B_NUEVO_LEON = '");
		query.append(pyMEs.isbNuevoLeon());
		query.append("', ");
		query.append("B_OAXACA = '");
		query.append(pyMEs.isbOaxaca());
		query.append("', ");
		query.append("B_PUEBLA = '");
		query.append(pyMEs.isbPuebla());
		query.append("', ");
		query.append("B_QUERETARO = '");
		query.append(pyMEs.isbQueretaro());
		query.append("', ");
		query.append("B_QUINTANA_ROO = '");
		query.append(pyMEs.isbQuintanaRoo());
		query.append("', ");
		query.append("B_SAN_LUIS_POTOSI = '");
		query.append(pyMEs.isbSanLuisPotosi());
		query.append("', ");
		query.append("B_SINALOA = '");
		query.append(pyMEs.isbSinaloa());
		query.append("', ");
		query.append("B_SONORA = '");
		query.append(pyMEs.isbSonora());
		query.append("', ");
		query.append("B_TABASCO = '");
		query.append(pyMEs.isbTabasco());
		query.append("', ");
		query.append("B_TAMAULIPAS = '");
		query.append(pyMEs.isbTamaulipas());
		query.append("', ");
		query.append("B_TLAXCALA = '");
		query.append(pyMEs.isbTlaxcala());
		query.append("', ");
		query.append("B_VERACRUZ = '");
		query.append(pyMEs.isbVeracruz());
		query.append("', ");
		query.append("B_YUCATAN = '");
		query.append(pyMEs.isbYucatan());
		query.append("', ");
		query.append("B_ZACATECAS = '");
		query.append(pyMEs.isbZacatecas());
		query.append("'");
		query.append(" WHERE ID_USUARIO = ");
		query.append(pyMEs.getIdUsuario());
		query.append(" ");
		log.debug("query=" + query);

		try {

			Clientes cl = null;
			Contacto co = null;
			Productos p = null;
			Documento d = null;
			boolean result = true;

			getJdbcTemplate().update(query.toString());

			int idPyME = pyMEs.getIdUsuario();

			/* Sección de Productos */

			if (pyMEs.getIdProducto1() == 0
					&& pyMEs.getProducto1().length() > 0) {
				log.debug("Insertando el producto1 = " + pyMEs.getProducto1());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto1());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto1() != 0
					&& pyMEs.getProducto1().length() > 0) {
				log.debug("Actualizando el producto1 = " + pyMEs.getProducto1());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto1());
				p.setProducto(pyMEs.getProducto1());
				result = updateProducto(p).getRespuesta() == 0;
			}

			if (pyMEs.getIdProducto2() == 0
					&& pyMEs.getProducto2().length() > 0) {
				log.debug("Insertando el producto2 = " + pyMEs.getProducto2());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto2());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto2() != 0
					&& pyMEs.getProducto2().length() > 0) {
				log.debug("Actualizando el producto2 = " + pyMEs.getProducto2());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto2());
				p.setProducto(pyMEs.getProducto2());
				result = updateProducto(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto2() != 0
					&& pyMEs.getProducto2().length() == 0) {
				log.debug("Eliminando el producto2 = " + pyMEs.getProducto2());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto2());
				result = deleteProducto(p).getRespuesta() == 0;
			}

			if (pyMEs.getIdProducto3() == 0
					&& pyMEs.getProducto3().length() > 0) {
				log.debug("Insertando el producto3 = " + pyMEs.getProducto3());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto3());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto3() != 0
					&& pyMEs.getProducto3().length() > 0) {
				log.debug("Actualizando el producto3 = " + pyMEs.getProducto3());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto3());
				p.setProducto(pyMEs.getProducto3());
				result = updateProducto(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto3() != 0
					&& pyMEs.getProducto3().length() == 0) {
				log.debug("Eliminando el producto3 = " + pyMEs.getProducto3());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto3());
				result = deleteProducto(p).getRespuesta() == 0;
			}

			if (pyMEs.getIdProducto4() == 0
					&& pyMEs.getProducto4().length() > 0) {
				log.debug("Insertando el producto4 = " + pyMEs.getProducto4());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto4());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto4() != 0
					&& pyMEs.getProducto4().length() > 0) {
				log.debug("Actualizando el producto4 = " + pyMEs.getProducto4());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto4());
				p.setProducto(pyMEs.getProducto4());
				result = updateProducto(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto4() != 0
					&& pyMEs.getProducto4().length() == 0) {
				log.debug("Eliminando el producto4 = " + pyMEs.getProducto4());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto4());
				result = deleteProducto(p).getRespuesta() == 0;
			}

			if (pyMEs.getIdProducto5() == 0
					&& pyMEs.getProducto5().length() > 0) {
				log.debug("Insertando el producto5 = " + pyMEs.getProducto5());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto5());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto5() != 0
					&& pyMEs.getProducto5().length() > 0) {
				log.debug("Actualizando el producto5 = " + pyMEs.getProducto5());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto5());
				p.setProducto(pyMEs.getProducto5());
				result = updateProducto(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto5() != 0
					&& pyMEs.getProducto5().length() == 0) {
				log.debug("Eliminando el producto5 = " + pyMEs.getProducto5());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto5());
				result = deleteProducto(p).getRespuesta() == 0;
			}

			if (pyMEs.getIdProducto6() == 0
					&& pyMEs.getProducto6().length() > 0) {
				log.debug("Insertando el producto6 = " + pyMEs.getProducto6());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto6());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto6() != 0
					&& pyMEs.getProducto6().length() > 0) {
				log.debug("Actualizando el producto6 = " + pyMEs.getProducto6());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto6());
				p.setProducto(pyMEs.getProducto6());
				result = updateProducto(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto6() != 0
					&& pyMEs.getProducto6().length() == 0) {
				log.debug("Eliminando el producto6 = " + pyMEs.getProducto6());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto6());
				result = deleteProducto(p).getRespuesta() == 0;
			}

			if (pyMEs.getIdProducto7() == 0
					&& pyMEs.getProducto7().length() > 0) {
				log.debug("Insertando el producto7 = " + pyMEs.getProducto7());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto7());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto7() != 0
					&& pyMEs.getProducto7().length() > 0) {
				log.debug("Actualizando el producto7 = " + pyMEs.getProducto7());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto7());
				p.setProducto(pyMEs.getProducto7());
				result = updateProducto(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto7() != 0
					&& pyMEs.getProducto7().length() == 0) {
				log.debug("Eliminando el producto7 = " + pyMEs.getProducto7());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto7());
				result = deleteProducto(p).getRespuesta() == 0;
			}

			if (pyMEs.getIdProducto8() == 0
					&& pyMEs.getProducto8().length() > 0) {
				log.debug("Insertando el producto8 = " + pyMEs.getProducto8());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto8());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto8() != 0
					&& pyMEs.getProducto8().length() > 0) {
				log.debug("Actualizando el producto8 = " + pyMEs.getProducto8());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto8());
				p.setProducto(pyMEs.getProducto8());
				result = updateProducto(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto8() != 0
					&& pyMEs.getProducto8().length() == 0) {
				log.debug("Eliminando el producto8 = " + pyMEs.getProducto8());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto8());
				result = deleteProducto(p).getRespuesta() == 0;
			}

			if (pyMEs.getIdProducto9() == 0
					&& pyMEs.getProducto9().length() > 0) {
				log.debug("Insertando el producto9 = " + pyMEs.getProducto9());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto9());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto9() != 0
					&& pyMEs.getProducto9().length() > 0) {
				log.debug("Actualizando el producto9 = " + pyMEs.getProducto9());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto9());
				p.setProducto(pyMEs.getProducto9());
				result = updateProducto(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto9() != 0
					&& pyMEs.getProducto9().length() == 0) {
				log.debug("Eliminando el producto9 = " + pyMEs.getProducto9());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto9());
				result = deleteProducto(p).getRespuesta() == 0;
			}

			if (pyMEs.getIdProducto10() == 0
					&& pyMEs.getProducto10().length() > 0) {
				log.debug("Insertando el producto10 = " + pyMEs.getProducto10());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto10());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto10() != 0
					&& pyMEs.getProducto10().length() > 0) {
				log.debug("Actualizando el producto10 = "
						+ pyMEs.getProducto10());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto10());
				p.setProducto(pyMEs.getProducto10());
				result = updateProducto(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto10() != 0
					&& pyMEs.getProducto10().length() == 0) {
				log.debug("Eliminando el producto10 = " + pyMEs.getProducto10());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto10());
				result = deleteProducto(p).getRespuesta() == 0;
			}

			if (pyMEs.getIdProducto11() == 0
					&& pyMEs.getProducto11().length() > 0) {
				log.debug("Insertando el producto11 = " + pyMEs.getProducto11());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto11());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto11() != 0
					&& pyMEs.getProducto11().length() > 0) {
				log.debug("Actualizando el producto11 = "
						+ pyMEs.getProducto11());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto11());
				p.setProducto(pyMEs.getProducto11());
				result = updateProducto(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto11() != 0
					&& pyMEs.getProducto11().length() == 0) {
				log.debug("Eliminando el producto11 = " + pyMEs.getProducto11());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto11());
				result = deleteProducto(p).getRespuesta() == 0;
			}

			if (pyMEs.getIdProducto12() == 0
					&& pyMEs.getProducto12().length() > 0) {
				log.debug("Insertando el producto12 = " + pyMEs.getProducto12());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto12());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto12() != 0
					&& pyMEs.getProducto12().length() > 0) {
				log.debug("Actualizando el producto12 = "
						+ pyMEs.getProducto12());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto12());
				p.setProducto(pyMEs.getProducto12());
				result = updateProducto(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto12() != 0
					&& pyMEs.getProducto12().length() == 0) {
				log.debug("Eliminando el producto12 = " + pyMEs.getProducto12());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto12());
				result = deleteProducto(p).getRespuesta() == 0;
			}

			if (pyMEs.getIdProducto13() == 0
					&& pyMEs.getProducto13().length() > 0) {
				log.debug("Insertando el producto13 = " + pyMEs.getProducto13());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto13());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto13() != 0
					&& pyMEs.getProducto13().length() > 0) {
				log.debug("Actualizando el producto13 = "
						+ pyMEs.getProducto13());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto13());
				p.setProducto(pyMEs.getProducto13());
				result = updateProducto(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto13() != 0
					&& pyMEs.getProducto13().length() == 0) {
				log.debug("Eliminando el producto13 = " + pyMEs.getProducto13());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto13());
				result = deleteProducto(p).getRespuesta() == 0;
			}

			if (pyMEs.getIdProducto14() == 0
					&& pyMEs.getProducto14().length() > 0) {
				log.debug("Insertando el producto14 = " + pyMEs.getProducto14());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto14());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto14() != 0
					&& pyMEs.getProducto14().length() > 0) {
				log.debug("Actualizando el producto14 = "
						+ pyMEs.getProducto14());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto14());
				p.setProducto(pyMEs.getProducto14());
				result = updateProducto(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto14() != 0
					&& pyMEs.getProducto14().length() == 0) {
				log.debug("Eliminando el producto14 = " + pyMEs.getProducto14());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto14());
				result = deleteProducto(p).getRespuesta() == 0;
			}

			if (pyMEs.getIdProducto15() == 0
					&& pyMEs.getProducto15().length() > 0) {
				log.debug("Insertando el producto15 = " + pyMEs.getProducto15());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto15());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto15() != 0
					&& pyMEs.getProducto15().length() > 0) {
				log.debug("Actualizando el producto15 = "
						+ pyMEs.getProducto15());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto15());
				p.setProducto(pyMEs.getProducto15());
				result = updateProducto(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto15() != 0
					&& pyMEs.getProducto15().length() == 0) {
				log.debug("Eliminando el producto15 = " + pyMEs.getProducto15());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto15());
				result = deleteProducto(p).getRespuesta() == 0;
			}

			if (pyMEs.getIdProducto16() == 0
					&& pyMEs.getProducto16().length() > 0) {
				log.debug("Insertando el producto16 = " + pyMEs.getProducto16());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto16());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto16() != 0
					&& pyMEs.getProducto16().length() > 0) {
				log.debug("Actualizando el producto16 = "
						+ pyMEs.getProducto16());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto16());
				p.setProducto(pyMEs.getProducto16());
				result = updateProducto(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto16() != 0
					&& pyMEs.getProducto16().length() == 0) {
				log.debug("Eliminando el producto16 = " + pyMEs.getProducto16());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto16());
				result = deleteProducto(p).getRespuesta() == 0;
			}

			if (pyMEs.getIdProducto17() == 0
					&& pyMEs.getProducto17().length() > 0) {
				log.debug("Insertando el producto17 = " + pyMEs.getProducto17());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto17());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto17() != 0
					&& pyMEs.getProducto17().length() > 0) {
				log.debug("Actualizando el producto17 = "
						+ pyMEs.getProducto17());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto17());
				p.setProducto(pyMEs.getProducto17());
				result = updateProducto(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto17() != 0
					&& pyMEs.getProducto17().length() == 0) {
				log.debug("Eliminando el producto17 = " + pyMEs.getProducto17());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto17());
				result = deleteProducto(p).getRespuesta() == 0;
			}

			if (pyMEs.getIdProducto18() == 0
					&& pyMEs.getProducto18().length() > 0) {
				log.debug("Insertando el producto18 = " + pyMEs.getProducto18());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto18());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto18() != 0
					&& pyMEs.getProducto18().length() > 0) {
				log.debug("Actualizando el producto18 = "
						+ pyMEs.getProducto18());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto18());
				p.setProducto(pyMEs.getProducto18());
				result = updateProducto(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto18() != 0
					&& pyMEs.getProducto18().length() == 0) {
				log.debug("Eliminando el producto18 = " + pyMEs.getProducto18());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto18());
				result = deleteProducto(p).getRespuesta() == 0;
			}

			if (pyMEs.getIdProducto19() == 0
					&& pyMEs.getProducto19().length() > 0) {
				log.debug("Insertando el producto19 = " + pyMEs.getProducto19());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto19());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto19() != 0
					&& pyMEs.getProducto19().length() > 0) {
				log.debug("Actualizando el producto19 = "
						+ pyMEs.getProducto19());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto19());
				p.setProducto(pyMEs.getProducto19());
				result = updateProducto(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto19() != 0
					&& pyMEs.getProducto19().length() == 0) {
				log.debug("Eliminando el producto19 = " + pyMEs.getProducto19());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto19());
				result = deleteProducto(p).getRespuesta() == 0;
			}

			if (pyMEs.getIdProducto20() == 0
					&& pyMEs.getProducto20().length() > 0) {
				log.debug("Insertando el producto20 = " + pyMEs.getProducto20());
				p = new Productos();
				p.setIdUsuario(idPyME);
				p.setProducto(pyMEs.getProducto20());
				result = saveProductos(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto20() != 0
					&& pyMEs.getProducto20().length() > 0) {
				log.debug("Actualizando el producto20 = "
						+ pyMEs.getProducto20());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto20());
				p.setProducto(pyMEs.getProducto20());
				result = updateProducto(p).getRespuesta() == 0;
			} else if (pyMEs.getIdProducto20() != 0
					&& pyMEs.getProducto20().length() == 0) {
				log.debug("Eliminando el producto20 = " + pyMEs.getProducto20());
				p = new Productos();
				p.setIdProducto(pyMEs.getIdProducto20());
				result = deleteProducto(p).getRespuesta() == 0;
			}

			/* Sección de contactos */

			if (pyMEs.getIdContacto1() == 0 && pyMEs.getTipoContacto1() != null) {
				log.debug("Insertando el Contacto 1 = "
						+ pyMEs.getNombreContacto1());
				co = new Contacto();
				co.setIdUsuario(idPyME);
				co.setTipo(pyMEs.getTipoContacto1());
				co.setNombre(pyMEs.getNombreContacto1());
				co.setApellidoPaterno(pyMEs.getAppPaterno1());
				co.setApellidoMaterno(pyMEs.getAppMaterno1());
				co.setCorreoElectronico(pyMEs.getCorreoElectronicoContacto1());
				co.setTelefono(pyMEs.getTelefonoContacto1());
				result = saveContacto(co).getRespuesta() == 0;
			} else if (pyMEs.getIdContacto1() != 0
					&& pyMEs.getTipoContacto1() != null) {
				log.debug("Actualizando el Contacto 1 = "
						+ pyMEs.getNombreContacto1());
				co = new Contacto();
				co.setIdContacto(pyMEs.getIdContacto1());
				co.setTipo(pyMEs.getTipoContacto1());
				co.setNombre(pyMEs.getNombreContacto1());
				co.setApellidoPaterno(pyMEs.getAppPaterno1());
				co.setApellidoMaterno(pyMEs.getAppMaterno1());
				co.setCorreoElectronico(pyMEs.getCorreoElectronicoContacto1());
				co.setTelefono(pyMEs.getTelefonoContacto1());
				result = updateContacto(co).getRespuesta() == 0;
			} else if (pyMEs.getIdContacto1() != 0
					&& pyMEs.getNombreContacto1() == null) {
				log.debug("Eliminando el Contacto 1 = " + pyMEs.getCliente1());
				co = new Contacto();
				co.setIdContacto(pyMEs.getIdContacto1());
				result = deleteContacto(co).getRespuesta() == 0;
			}

			if (pyMEs.getIdContacto2() == 0 && pyMEs.getTipoContacto2() != null) {
				log.debug("Insertando el Contacto 2 = "
						+ pyMEs.getNombreContacto2());
				co = new Contacto();
				co.setIdUsuario(idPyME);
				co.setTipo(pyMEs.getTipoContacto2());
				co.setNombre(pyMEs.getNombreContacto2());
				co.setApellidoPaterno(pyMEs.getAppPaterno2());
				co.setApellidoMaterno(pyMEs.getAppMaterno2());
				co.setCorreoElectronico(pyMEs.getCorreoElectronicoContacto2());
				co.setTelefono(pyMEs.getTelefonoContacto2());
				result = saveContacto(co).getRespuesta() == 0;
			} else if (pyMEs.getIdContacto2() != 0
					&& pyMEs.getTipoContacto2() != null) {
				log.debug("Actualizando el Contacto 2 = "
						+ pyMEs.getNombreContacto2());
				co = new Contacto();
				co.setIdContacto(pyMEs.getIdContacto2());
				co.setTipo(pyMEs.getTipoContacto2());
				co.setNombre(pyMEs.getNombreContacto2());
				co.setApellidoPaterno(pyMEs.getAppPaterno2());
				co.setApellidoMaterno(pyMEs.getAppMaterno2());
				co.setCorreoElectronico(pyMEs.getCorreoElectronicoContacto2());
				co.setTelefono(pyMEs.getTelefonoContacto2());
				result = updateContacto(co).getRespuesta() == 0;
			} else if (pyMEs.getIdContacto2() != 0
					&& pyMEs.getNombreContacto2() == null) {
				log.debug("Eliminando el Contacto 2 = " + pyMEs.getCliente2());
				co = new Contacto();
				co.setIdContacto(pyMEs.getIdContacto2());
				result = deleteContacto(co).getRespuesta() == 0;
			}

			/* Sección de clientes */

			if (pyMEs.getIdCliente1() == 0 && pyMEs.getCliente1().length() > 0) {
				log.debug("Insertando el cliente1 = " + pyMEs.getCliente1());
				cl = new Clientes();
				cl.setIdUsuario(idPyME);
				cl.setCliente(pyMEs.getCliente1());
				cl.setProductosCompra(pyMEs.getProductosCompra1());
				cl.setAniosProveedor(pyMEs.getAniosProveedor1());
				cl.setMesesProveedor(pyMEs.getMesesProveedor1());
				result = saveClientes(cl).getRespuesta() == 0;
			} else if (pyMEs.getIdCliente1() != 0
					&& pyMEs.getCliente1().length() > 0) {
				log.debug("Actualizando el cliente1 = " + pyMEs.getCliente1());
				cl = new Clientes();
				cl.setIdCliente(pyMEs.getIdCliente1());
				cl.setCliente(pyMEs.getCliente1());
				cl.setProductosCompra(pyMEs.getProductosCompra1());
				cl.setAniosProveedor(pyMEs.getAniosProveedor1());
				cl.setMesesProveedor(pyMEs.getMesesProveedor1());
				result = updateCliente(cl).getRespuesta() == 0;
			} else if (pyMEs.getIdCliente1() != 0
					&& pyMEs.getCliente1().length() == 0) {
				log.debug("Eliminando el cliente1 = " + pyMEs.getCliente1());
				cl = new Clientes();
				cl.setIdCliente(pyMEs.getIdCliente1());
				result = deleteCliente(cl).getRespuesta() == 0;
			}

			if (pyMEs.getIdCliente2() == 0 && pyMEs.getCliente2().length() > 2) {
				log.debug("Insertando el cliente 2 = " + pyMEs.getCliente2());
				cl = new Clientes();
				cl.setIdUsuario(idPyME);
				cl.setCliente(pyMEs.getCliente2());
				cl.setProductosCompra(pyMEs.getProductosCompra2());
				cl.setAniosProveedor(pyMEs.getAniosProveedor2());
				cl.setMesesProveedor(pyMEs.getMesesProveedor2());
				result = saveClientes(cl).getRespuesta() == 0;
			} else if (pyMEs.getIdCliente2() != 0
					&& pyMEs.getCliente2().length() > 0) {
				log.debug("Actualizando el cliente2 = " + pyMEs.getCliente2());
				cl = new Clientes();
				cl.setIdCliente(pyMEs.getIdCliente2());
				cl.setCliente(pyMEs.getCliente2());
				cl.setProductosCompra(pyMEs.getProductosCompra2());
				cl.setAniosProveedor(pyMEs.getAniosProveedor2());
				cl.setMesesProveedor(pyMEs.getMesesProveedor2());
				result = updateCliente(cl).getRespuesta() == 0;
			} else if (pyMEs.getIdCliente2() != 0
					&& pyMEs.getCliente2().length() == 0) {
				log.debug("Eliminando el cliente2 = " + pyMEs.getCliente2());
				cl = new Clientes();
				cl.setIdCliente(pyMEs.getIdCliente2());
				result = deleteCliente(cl).getRespuesta() == 0;
			}

			if (pyMEs.getIdCliente3() == 0 && pyMEs.getCliente3().length() > 2) {
				log.debug("Insertando el cliente 3 = " + pyMEs.getCliente3());
				cl = new Clientes();
				cl.setIdUsuario(idPyME);
				cl.setCliente(pyMEs.getCliente3());
				cl.setProductosCompra(pyMEs.getProductosCompra3());
				cl.setAniosProveedor(pyMEs.getAniosProveedor3());
				cl.setMesesProveedor(pyMEs.getMesesProveedor3());
				result = saveClientes(cl).getRespuesta() == 0;
			} else if (pyMEs.getIdCliente3() != 0
					&& pyMEs.getCliente3().length() > 0) {
				log.debug("Actualizando el cliente3 = " + pyMEs.getCliente3());
				cl = new Clientes();
				cl.setIdCliente(pyMEs.getIdCliente3());
				cl.setCliente(pyMEs.getCliente3());
				cl.setProductosCompra(pyMEs.getProductosCompra3());
				cl.setAniosProveedor(pyMEs.getAniosProveedor3());
				cl.setMesesProveedor(pyMEs.getMesesProveedor3());
				result = updateCliente(cl).getRespuesta() == 0;
			} else if (pyMEs.getIdCliente3() != 0
					&& pyMEs.getCliente3().length() == 0) {
				log.debug("Eliminando el cliente3 = " + pyMEs.getCliente3());
				cl = new Clientes();
				cl.setIdCliente(pyMEs.getIdCliente3());
				result = deleteCliente(cl).getRespuesta() == 0;
			}

			if (pyMEs.getIdCliente4() == 0 && pyMEs.getCliente4().length() > 2) {
				log.debug("Insertando el cliente 4 = " + pyMEs.getCliente4());
				cl = new Clientes();
				cl.setIdUsuario(idPyME);
				cl.setCliente(pyMEs.getCliente4());
				cl.setProductosCompra(pyMEs.getProductosCompra4());
				cl.setAniosProveedor(pyMEs.getAniosProveedor4());
				cl.setMesesProveedor(pyMEs.getMesesProveedor4());
				result = saveClientes(cl).getRespuesta() == 0;
			} else if (pyMEs.getIdCliente4() != 0
					&& pyMEs.getCliente4().length() > 0) {
				log.debug("Actualizando el cliente4 = " + pyMEs.getCliente4());
				cl = new Clientes();
				cl.setIdCliente(pyMEs.getIdCliente4());
				cl.setCliente(pyMEs.getCliente4());
				cl.setProductosCompra(pyMEs.getProductosCompra4());
				cl.setAniosProveedor(pyMEs.getAniosProveedor4());
				cl.setMesesProveedor(pyMEs.getMesesProveedor4());
				result = updateCliente(cl).getRespuesta() == 0;
			} else if (pyMEs.getIdCliente4() != 0
					&& pyMEs.getCliente4().length() == 0) {
				log.debug("Eliminando el cliente4 = " + pyMEs.getCliente4());
				cl = new Clientes();
				cl.setIdCliente(pyMEs.getIdCliente4());
				result = deleteCliente(cl).getRespuesta() == 0;
			}

			if (pyMEs.getIdCliente5() == 0 && pyMEs.getCliente5().length() > 2) {
				log.debug("Insertando el cliente 5 = " + pyMEs.getCliente5());
				cl = new Clientes();
				cl.setIdUsuario(idPyME);
				cl.setCliente(pyMEs.getCliente5());
				cl.setProductosCompra(pyMEs.getProductosCompra5());
				cl.setAniosProveedor(pyMEs.getAniosProveedor5());
				cl.setMesesProveedor(pyMEs.getMesesProveedor5());
				result = saveClientes(cl).getRespuesta() == 0;
			} else if (pyMEs.getIdCliente5() != 0
					&& pyMEs.getCliente5().length() > 0) {
				log.debug("Actualizando el cliente5 = " + pyMEs.getCliente5());
				cl = new Clientes();
				cl.setIdCliente(pyMEs.getIdCliente5());
				cl.setCliente(pyMEs.getCliente5());
				cl.setProductosCompra(pyMEs.getProductosCompra5());
				cl.setAniosProveedor(pyMEs.getAniosProveedor5());
				cl.setMesesProveedor(pyMEs.getMesesProveedor5());
				result = updateCliente(cl).getRespuesta() == 0;
			} else if (pyMEs.getIdCliente5() != 0
					&& pyMEs.getCliente5().length() == 0) {
				log.debug("Eliminando el cliente5 = " + pyMEs.getCliente5());
				cl = new Clientes();
				cl.setIdCliente(pyMEs.getIdCliente5());
				result = deleteCliente(cl).getRespuesta() == 0;
			}

			/* Sección de Archivos */

			if (pyMEs.getArchivo1() != null) {
				log.debug("Insertando el Archivo 1 = " + pyMEs.getArchivo1());
				d = new Documento();
				d.setIs(pyMEs.getArchivo1());
				d.setIdReferencia(idPyME);
				d.setNombre(pyMEs.getArchivo1FileName());
				d.setDescripcionArchivo(pyMEs.getDescArchivo1());
				result = insertDocumento(d).getRespuesta() == 0;
			}
			if (pyMEs.getArchivo2() != null) {
				log.debug("Insertando el Archivo 2 = " + pyMEs.getArchivo2());
				d = new Documento();
				d.setIs(pyMEs.getArchivo2());
				d.setIdReferencia(idPyME);
				d.setNombre(pyMEs.getArchivo2FileName());
				d.setDescripcionArchivo(pyMEs.getDescArchivo2());
				result = insertDocumento(d).getRespuesta() == 0;
			}
			if (pyMEs.getArchivo3() != null) {
				log.debug("Insertando el Archivo 3 = " + pyMEs.getArchivo3());
				d = new Documento();
				d.setIs(pyMEs.getArchivo3());
				d.setIdReferencia(idPyME);
				d.setNombre(pyMEs.getArchivo3FileName());
				d.setDescripcionArchivo(pyMEs.getDescArchivo3());
				result = insertDocumento(d).getRespuesta() == 0;
			}
			if (pyMEs.getArchivo4() != null) {
				log.debug("Insertando el Archivo 4 = " + pyMEs.getArchivo4());
				d = new Documento();
				d.setIs(pyMEs.getArchivo4());
				d.setIdReferencia(idPyME);
				d.setNombre(pyMEs.getArchivo4FileName());
				d.setDescripcionArchivo(pyMEs.getDescArchivo4());
				result = insertDocumento(d).getRespuesta() == 0;
			}
			if (pyMEs.getArchivo5() != null) {
				log.debug("Insertando el Archivo 5 = " + pyMEs.getArchivo5());
				d = new Documento();
				d.setIs(pyMEs.getArchivo5());
				d.setIdReferencia(idPyME);
				d.setNombre(pyMEs.getArchivo5FileName());
				d.setDescripcionArchivo(pyMEs.getDescArchivo5());
				result = insertDocumento(d).getRespuesta() == 0;
			}
			if (pyMEs.getArchivo6() != null) {
				log.debug("Insertando el Archivo 6 = " + pyMEs.getArchivo6());
				d = new Documento();
				d.setIs(pyMEs.getArchivo6());
				d.setIdReferencia(idPyME);
				d.setNombre(pyMEs.getArchivo6FileName());
				d.setDescripcionArchivo(pyMEs.getDescArchivo6());
				result = insertDocumento(d).getRespuesta() == 0;
			}
			if (pyMEs.getArchivo7() != null) {
				log.debug("Insertando el Archivo 7 = " + pyMEs.getArchivo7());
				d = new Documento();
				d.setIs(pyMEs.getArchivo7());
				d.setIdReferencia(idPyME);
				d.setNombre(pyMEs.getArchivo7FileName());
				d.setDescripcionArchivo(pyMEs.getDescArchivo7());
				result = insertDocumento(d).getRespuesta() == 0;
			}
			if (pyMEs.getArchivo8() != null) {
				log.debug("Insertando el Archivo 8 = " + pyMEs.getArchivo8());
				d = new Documento();
				d.setIs(pyMEs.getArchivo8());
				d.setIdReferencia(idPyME);
				d.setNombre(pyMEs.getArchivo8FileName());
				d.setDescripcionArchivo(pyMEs.getDescArchivo8());
				result = insertDocumento(d).getRespuesta() == 0;
			}
			if (pyMEs.getArchivo9() != null) {
				log.debug("Insertando el Archivo 9 = " + pyMEs.getArchivo9());
				d = new Documento();
				d.setIs(pyMEs.getArchivo9());
				d.setIdReferencia(idPyME);
				d.setNombre(pyMEs.getArchivo9FileName());
				d.setDescripcionArchivo(pyMEs.getDescArchivo9());
				result = insertDocumento(d).getRespuesta() == 0;
			}
			if (pyMEs.getArchivo10() != null) {
				log.debug("Insertando el Archivo 10 = " + pyMEs.getArchivo10());
				d = new Documento();
				d.setIs(pyMEs.getArchivo10());
				d.setIdReferencia(idPyME);
				d.setNombre(pyMEs.getArchivo10FileName());
				d.setDescripcionArchivo(pyMEs.getDescArchivo10());
				result = insertDocumento(d).getRespuesta() == 0;
			}

			if (result) {
				Mensaje m = new Mensaje();
				m.setRespuesta(0);
				m.setMensaje("Los datos de la PyME se actualizaron satisfactoriamente.");
				m.setId(String.valueOf(idPyME));
				return m;
			} else {
				return new Mensaje(
						1,
						"Los datos de la PyME se actualizaron con errores al guardar el o los clientes.");
			}

		} catch (Exception e) {
			log.fatal("ERROR al actualizar los datos de la PyME, " + e);
			return new Mensaje(1,
					"No es posible actualizar los datos de la PyME, intentelo más tarde.");
		}
	}

	public Mensaje saveDomicilios(Domicilios domicilios) throws DaoException {
		log.debug("SaveDomicilios()");

		StringBuffer query = new StringBuffer();
		query.append("INSERT INTO ");
		query.append("INFRA.DOMICILIOS (");
		query.append("CALLE, ");
		query.append("NUM_EXT, ");
		query.append("NUM_INT, ");
		query.append("PISO, ");
		query.append("COLONIA, ");
		query.append("DELEGACION, ");
		query.append("ESTADO, ");
		query.append("CODIGO_POSTAL) ");
		query.append("VALUES ('");
		query.append(domicilios.getCalle());
		query.append("', '");
		query.append(domicilios.getNumExt());
		query.append("', '");
		query.append(domicilios.getNumInt());
		query.append("', '");
		query.append(domicilios.getPiso());
		query.append("', '");
		query.append(domicilios.getColonia());
		query.append("', '");
		query.append(domicilios.getDelegacion());
		query.append("', '");
		query.append(domicilios.getEstado());
		query.append("', '");
		query.append(domicilios.getCodigoPostal());
		query.append("') ");
		log.debug("query=" + query);

		try {
			getJdbcTemplate().update(query.toString());
			Mensaje m = new Mensaje();
			m.setRespuesta(0);
			m.setMensaje("Los datos de Domicilio han sido registrados exitosamente.");
			m.setId(String.valueOf(getIdDomicilio().getIdDomicilio()));
			return m;
		} catch (Exception e) {
			log.fatal("ERROR al insertar los datos de Domicilio, " + e);
			return new Mensaje(1,
					"No es posible registrar los datos de domicilio.");
		}
	}

	public Mensaje saveRelDomicilios(Domicilios domicilios, PyMEs pyMEs)
			throws DaoException {

		log.debug("saveRelDomicilios()");

		StringBuffer query = new StringBuffer();
		query.append("INSERT INTO ");
		query.append("INFRA.REL_DOMICILIOS_USUARIO (");
		query.append("ID_USUARIO, ");
		query.append("ID_DOMICILIO) ");
		query.append("VALUES ('");
		query.append(pyMEs.getIdUsuario());
		query.append("', '");
		query.append(domicilios.getIdDomicilio());
		query.append("')");
		log.debug("query=" + query);

		try {
			getJdbcTemplate().update(query.toString());
			return new Mensaje(0,
					"Los datos han sido registrados exitosamente.");
		} catch (Exception e) {
			log.fatal("ERROR al salvar los datos REL_DOMICILIOS, " + e);
			return new Mensaje(1, "No es posible registrar los datos.");
		}
	}

	@Override
	public Mensaje updateDomicilios(Domicilios domicilios)
			throws JdbcDaoException {
		log.debug("updateDomicilios()");

		StringBuffer query = new StringBuffer();
		query.append("UPDATE ");
		query.append("INFRA.DOMICILIOS SET ");
		query.append("CALLE = '");
		query.append(domicilios.getCalle());
		query.append("', ");
		query.append("NUM_EXT = '");
		query.append(domicilios.getNumExt());
		query.append("', ");
		query.append("NUM_INT = '");
		query.append(domicilios.getNumInt());
		query.append("', ");
		query.append("PISO = '");
		query.append(domicilios.getPiso());
		query.append("', ");
		query.append("COLONIA = '");
		query.append(domicilios.getColonia());
		query.append("', ");
		query.append("DELEGACION = '");
		query.append(domicilios.getDelegacion());
		query.append("', ");
		query.append("ESTADO = '");
		query.append(domicilios.getEstado());
		query.append("', ");
		query.append("CODIGO_POSTAL = '");
		query.append(domicilios.getCodigoPostal());
		query.append("'");
		query.append(" WHERE ID_DOMICILIO = ");
		query.append(domicilios.getIdDomicilio());
		query.append(" ");
		log.debug("query=" + query);

		try {
			getJdbcTemplate().update(query.toString());
			return new Mensaje(0,
					"Los datos de la PyME se actualizaron satisfactoriamente.");
		} catch (Exception e) {
			log.fatal("ERROR al actualizar los datos de la PyME, " + e);
			return new Mensaje(1,
					"No es posible actualizar los datos de la Tractora, intentelo más tarde.");
		}
	}

	public Mensaje saveCertificaciones(Certificaciones certificaciones)
			throws DaoException {
		log.debug("saveCertificaciones()");

		StringBuffer query = new StringBuffer();
		query.append("INSERT INTO ");
		query.append("INFRA.CERTIFICACIONES (");
		query.append("ID_USUARIO, ");
		query.append("CERTIFICACION, ");
		query.append("FECHA_CERTIFICACION) ");
		query.append("VALUES ('");
		query.append(certificaciones.getIdUsuario());
		query.append("', '");
		query.append(certificaciones.getCertificacion());
		query.append("', ");
		query.append("sysdate");
		query.append(")");
		log.debug("query=" + query);

		try {
			getJdbcTemplate().update(query.toString());
			return new Mensaje(0,
					"Los datos han sido registrados exitosamente.");
		} catch (Exception e) {
			log.fatal("ERROR al salvar los datos CERTIFICACIONES, " + e);
			return new Mensaje(1, "No es posible registrar los datos.");
		}
	}

	@Override
	public Mensaje updateCertificaciones(Certificaciones certificaciones)
			throws JdbcDaoException {
		log.debug("updateCertificaciones()");

		StringBuffer query = new StringBuffer();
		query.append("UPDATE ");
		query.append("INFRA.CERTIFICACIONES SET ");
		query.append("CERTIFICACION = '");
		query.append(certificaciones.getCertificacion());
		query.append("', ");
		query.append("FECHA_CERTIFICACION = '");
		query.append(certificaciones.getFechaCertificacion());
		query.append("' ");
		query.append("WHERE ID_CERTIFICADO = ");
		query.append(certificaciones.getIdCertificado());
		query.append(" ");
		log.debug("query=" + query);

		try {
			getJdbcTemplate().update(query.toString());
			return new Mensaje(0,
					"Los datos han sido actualizados exitosamente.");
		} catch (Exception e) {
			log.fatal("ERROR al actualizar los datos de los CERTIFICACIONES, "
					+ e);
			return new Mensaje(1,
					"No es posible registrar los datos, intentelo más tarde.");
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public Requerimientos getShowRequerimientos(int idRequerimiento)
			throws DaoException {
		log.debug("getShowRequerimientos()");

		Requerimientos result = null;
		StringBuffer query = new StringBuffer();
		query.append("SELECT ");
		query.append("R.ID_REQUERIMIENTO, ");
		query.append("T.EMPRESA, ");
		query.append("R.DESCRIPCION ");
		query.append("FROM INFRA.TRACTORAS AS T ");
		query.append("LEFT JOIN INFRA.REQUERIMIENTOS AS R ");
		query.append("ON T.ID_USUARIO=R.ID_TRACTORA ");
		query.append("WHERE R.ID_REQUERIMIENTO = " + idRequerimiento);
		log.debug("query=" + query);

		if (idRequerimiento == 0)
			return null;
		result = (Requerimientos) getJdbcTemplate().queryForObject(
				query.toString(), new ShowRequerimientosRowMapper());

		log.debug("result=" + result);
		return result;
	}

	@SuppressWarnings("rawtypes")
	public class ShowRequerimientosRowMapper implements RowMapper {

		@Override
		public Object mapRow(ResultSet rs, int ln) throws SQLException {
			ShowRequerimientosPyMEsResultSetExtractor extractor = new ShowRequerimientosPyMEsResultSetExtractor();
			return extractor.extractData(rs);
		}

	}

	@SuppressWarnings("rawtypes")
	public class ShowRequerimientosPyMEsResultSetExtractor implements
			ResultSetExtractor {

		@Override
		public Object extractData(ResultSet rs) throws SQLException,
				DataAccessException {
			Requerimientos req = new Requerimientos();
			req.setIdRequerimiento(rs.getInt("ID_REQUERIMIENTO"));
			req.setNombreTractora(rs.getString("EMPRESA"));
			req.setDescripcion(rs.getString("DESCRIPCION"));
			return req;

		}
	}

	@Override
	public Mensaje saveRespuestas(Respuesta respuesta) throws DaoException {
		log.debug("saveRespuestas()");

		StringBuffer query = new StringBuffer();
		query.append("INSERT INTO ");
		query.append("INFRA.RESPUESTAS (");
		query.append("ID_REQUERIMIENTO, ");
		query.append("INFORMACION, ");
		query.append("MENSAJE_ENVIO) ");
		query.append("VALUES ('");
		query.append(respuesta.getIdRequerimiento());
		query.append("', '");
		query.append(respuesta.getInformacion());
		query.append("', '");
		query.append(respuesta.getMensajeEnvio());
		query.append("')");
		log.debug("query=" + query);

		try {

			Documento d = null;
			boolean result = true;

			getJdbcTemplate().update(query.toString());

			int id = getIdRespuesta().getIdRespuesta();
			if (respuesta.getArchivo1() != null) {
				d = new Documento();
				d.setIs(respuesta.getArchivo1());
				d.setIdReferencia(id);
				d.setNombre(respuesta.getArchivo1FileName());
				result = insertDocumento(d).getRespuesta() == 0;
			}
			if (respuesta.getArchivo2() != null) {
				d = new Documento();
				d.setIs(respuesta.getArchivo2());
				d.setIdReferencia(id);
				d.setNombre(respuesta.getArchivo2FileName());
				result = insertDocumento(d).getRespuesta() == 0;
			}
			if (respuesta.getArchivo3() != null) {
				d = new Documento();
				d.setIs(respuesta.getArchivo3());
				d.setIdReferencia(id);
				d.setNombre(respuesta.getArchivo3FileName());
				result = insertDocumento(d).getRespuesta() == 0;
			}
			if (respuesta.getArchivo4() != null) {
				d = new Documento();
				d.setIs(respuesta.getArchivo4());
				d.setIdReferencia(id);
				d.setNombre(respuesta.getArchivo4FileName());
				result = insertDocumento(d).getRespuesta() == 0;
			}
			if (respuesta.getArchivo5() != null) {
				d = new Documento();
				d.setIs(respuesta.getArchivo5());
				d.setIdReferencia(id);
				d.setNombre(respuesta.getArchivo5FileName());
				result = insertDocumento(d).getRespuesta() == 0;
			}
			if (respuesta.getArchivo6() != null) {
				d = new Documento();
				d.setIs(respuesta.getArchivo6());
				d.setIdReferencia(id);
				d.setNombre(respuesta.getArchivo6FileName());
				result = insertDocumento(d).getRespuesta() == 0;
			}
			if (respuesta.getArchivo7() != null) {
				d = new Documento();
				d.setIs(respuesta.getArchivo7());
				d.setIdReferencia(id);
				d.setNombre(respuesta.getArchivo7FileName());
				result = insertDocumento(d).getRespuesta() == 0;
			}
			if (respuesta.getArchivo8() != null) {
				d = new Documento();
				d.setIs(respuesta.getArchivo8());
				d.setIdReferencia(id);
				d.setNombre(respuesta.getArchivo8FileName());
				result = insertDocumento(d).getRespuesta() == 0;
			}
			if (respuesta.getArchivo9() != null) {
				d = new Documento();
				d.setIs(respuesta.getArchivo9());
				d.setIdReferencia(id);
				d.setNombre(respuesta.getArchivo9FileName());
				result = insertDocumento(d).getRespuesta() == 0;
			}
			if (respuesta.getArchivo10() != null) {
				d = new Documento();
				d.setIs(respuesta.getArchivo10());
				d.setIdReferencia(id);
				d.setNombre(respuesta.getArchivo10FileName());
				result = insertDocumento(d).getRespuesta() == 0;
			}

			if (result) {
				Mensaje m = new Mensaje();
				m.setRespuesta(0);
				m.setMensaje("Su cotización se envió satisfactoriamente.");
				m.setId(String.valueOf(id));
				return m;
			} else {
				return new Mensaje(1,
						"La respuesta se insertó con errores al guardar el o los documentos.");
			}

		} catch (Exception e) {
			log.fatal("ERROR al salvar la respuesta del requerimiento, " + e);
			return new Mensaje(1,
					"No es posible enviar la respuesta del requerimiento, intentelo más tarde.");
		}
	}

	public Mensaje saveServDiplomados(ServiciosDiplomado serviciosDiplomado)
			throws DaoException {
		log.debug("saveServDiplomados()");

		StringBuffer query = new StringBuffer();
		query.append("INSERT INTO ");
		query.append("INFRA.SERVICIOS_DIPLOMADO (");
		query.append("ID_DIPLOMADO, ");
		query.append("ID_USUARIO, ");
		query.append("TITULO, ");
		query.append("FECHA, ");
		query.append("MENSAJE) ");
		query.append("VALUES ('");
		query.append(serviciosDiplomado.getIdDiplomado());
		query.append("', '");
		query.append(serviciosDiplomado.getIdUsuario());
		query.append("', '");
		query.append(serviciosDiplomado.getTitulo());
		query.append("', '");
		query.append(new java.sql.Date(serviciosDiplomado.getFecha().getTime()));
		query.append("', '");
		query.append(serviciosDiplomado.getMensaje());
		query.append("')");
		log.debug("query=" + query);

		try {

			Documento d = null;
			boolean result = true;

			getJdbcTemplate().update(query.toString());

			if (serviciosDiplomado.getArchivo1() != null) {
				log.debug("Insertando el Archivo 1 = "
						+ serviciosDiplomado.getArchivo1());
				d = new Documento();
				d.setIs(serviciosDiplomado.getArchivo1());
				d.setIdReferencia(serviciosDiplomado.getIdDiplomado());
				d.setNombre(serviciosDiplomado.getArchivo1FileName());
				result = insertDocumento(d).getRespuesta() == 0;
			}

			if (result) {
				Mensaje m = new Mensaje();
				m.setRespuesta(0);
				m.setMensaje("Estimada PYME ha quedado inscrita en el diplomado seleccionado, en breve nos comunicaremos con ustedes para confirmar su asistencia.");
				m.setId(String.valueOf(serviciosDiplomado.getIdDiplomado()));
				return m;
			} else {
				return new Mensaje(
						1,
						"Estimada PYME ha quedado inscrita en el diplomado seleccionado con errores al guardar el o los documentos.");
			}

		} catch (Exception e) {
			log.fatal("ERROR al salvar la inscripción del diplomado, " + e);
			return new Mensaje(1,
					"No es posible registrar el servicio, intentelo más tarde.");
		}
	}

	public Mensaje saveAsistentes(Asistentes asistentes) throws DaoException {
		log.debug("saveAsistentes()");

		StringBuffer query = new StringBuffer();
		query.append("INSERT INTO ");
		query.append("INFRA.ASISTENTES (");
		query.append("ID_DIPLOMADO, ");
		query.append("NOMBRE, ");
		query.append("APP_PATERNO, ");
		query.append("APP_MATERNO) ");
		query.append("VALUES ('");
		query.append(asistentes.getIdDiplomado());
		query.append("', '");
		query.append(asistentes.getNombre());
		query.append("', '");
		query.append(asistentes.getAppPaterno());
		query.append("', '");
		query.append(asistentes.getAppMaterno());
		query.append("')");
		log.debug("query=" + query);

		try {
			getJdbcTemplate().update(query.toString());
			return new Mensaje(
					0,
					"Estimada PYME ha quedado inscrita en los diplomados seleccionados. En breve nos comunicaremos con ustedes para confirmar su asistencia.");
		} catch (Exception e) {
			log.fatal("ERROR al salvar al asistente, " + e);
			return new Mensaje(1,
					"No es posible realizar el registro, intentelo más tarde.");
		}
	}

	public Mensaje saveConsultorias(ServiciosConsultoria seviciosConsultoria)
			throws DaoException {
		log.debug("saveConsultorias()");

		StringBuffer query = new StringBuffer();
		query.append("INSERT INTO ");
		query.append("INFRA.SERVICIOS_CONSULTORIA (");
		query.append("ID_USUARIO, ");
		query.append("B_CONSULTORIA_20, ");
		query.append("B_CONSULTORIA_40, ");
		query.append("B_CONSULTORIA_60, ");
		query.append("B_CONSULTORIA_80, ");
		query.append("MENSAJE) ");
		query.append("VALUES ('");
		query.append(seviciosConsultoria.getIdUsuario());
		query.append("', ");
		query.append(seviciosConsultoria.isbConsultoriaVeinte());
		query.append(", ");
		query.append(seviciosConsultoria.isbConsultoriaCuarenta());
		query.append(", ");
		query.append(seviciosConsultoria.isbConsultoriaSesenta());
		query.append(", ");
		query.append(seviciosConsultoria.isbConsultoriaOchenta());
		query.append(", '");
		query.append(seviciosConsultoria.getMensaje());
		query.append("')");
		log.debug("query=" + query);

		try {

			Documento d = null;
			boolean result = true;

			getJdbcTemplate().update(query.toString());

			int id = getIdConsultoria().getIdConsultoria();
			if (seviciosConsultoria.getArchivo1() != null) {
				log.debug("Insertando el Archivo 1 = "
						+ seviciosConsultoria.getArchivo1());
				d = new Documento();
				d.setIs(seviciosConsultoria.getArchivo1());
				d.setIdReferencia(id);
				d.setNombre(seviciosConsultoria.getArchivo1FileName());
				result = insertDocumento(d).getRespuesta() == 0;
			}

			if (result) {
				Mensaje m = new Mensaje();
				m.setRespuesta(0);
				m.setMensaje("Estimada PYME, en breve un consultor se pondrá en contacto con ustedes, a nombre del CCMX.");
				m.setId(String.valueOf(id));
				return m;
			} else {
				return new Mensaje(
						1,
						"Estimada PYME ha quedado inscrita en la consultoría seleccionada con errores al guardar el o los documentos.");
			}

		} catch (Exception e) {
			log.fatal("ERROR al salvar la consultoria, " + e);
			return new Mensaje(1,
					"No es posible realizar el registro, intentelo más tarde.");
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<PyMEs> getBusquedaPyMEs(String busqueda, String estado,
			String sector, String subSector) throws DaoException {
		log.debug("getBusquedaPyMEs()");

		StringBuffer query = new StringBuffer();
		query.append("SELECT ");
		query.append("P.NOMBRE_COMERCIAL, ");
		query.append("DO.ESTADO, ");
		query.append("CO.TELEFONO, ");
		query.append("CO.NOMBRE, ");
		query.append("CO.APELLIDO_PATERNO, ");
		query.append("CO.APELLIDO_MATERNO, ");
		query.append("CO.CORREO_ELECTRONICO ");
		query.append("FROM INFRA.PYMES AS P ");
		query.append("LEFT JOIN INFRA.CONTACTOS AS CO ");
		query.append("ON P.ID_USUARIO=CO.ID_USUARIO ");
		query.append("LEFT JOIN INFRA.REL_DOMICILIOS_USUARIO AS RDU ");
		query.append("ON P.ID_USUARIO=RDU.ID_USUARIO ");
		query.append("LEFT JOIN INFRA.DOMICILIOS AS DO ");
		query.append("ON RDU.ID_DOMICILIO=DO.ID_DOMICILIO ");
		query.append("WHERE (P.NOMBRE_COMERCIAL LIKE '%" + busqueda + "%' ");
		query.append("OR DO.ESTADO LIKE '%" + busqueda + "%' ");
		query.append("OR CO.TELEFONO LIKE '%" + busqueda + "%' ");
		query.append("OR CO.NOMBRE LIKE '%" + busqueda + "%' ");
		query.append("OR CO.APELLIDO_PATERNO LIKE '%" + busqueda + "%' ");
		query.append("OR CO.APELLIDO_MATERNO LIKE '%" + busqueda + "%' ");
		query.append("OR CO.CORREO_ELECTRONICO LIKE '%" + busqueda + "%') ");
		query.append("OR DO.ESTADO LIKE '%"+ estado + "%' ");
		log.debug("query=" + query);

		try {
			List<PyMEs> listPyME = getJdbcTemplate().query(query.toString(),
					new BusquedaPyMEsRowMapper());
			log.debug("result=" + listPyME);
			return listPyME;

		} catch (Exception e) {
			log.debug("Aquíe está el error: " + e);
		}
		return null;
	}

	@SuppressWarnings("rawtypes")
	public class BusquedaPyMEsRowMapper implements RowMapper {

		@Override
		public Object mapRow(ResultSet rs, int ln) throws SQLException {
			BusquedaPyMEsResultSetExtractor extractor = new BusquedaPyMEsResultSetExtractor();
			return extractor.extractData(rs);
		}

	}

	@SuppressWarnings("rawtypes")
	public class BusquedaPyMEsResultSetExtractor implements ResultSetExtractor {

		@Override
		public Object extractData(ResultSet rs) throws SQLException,
				DataAccessException {
			PyMEs pymes = new PyMEs();
			pymes.setNombreComercial(rs.getString("NOMBRE_COMERCIAL"));
			pymes.setEstado(rs.getString("ESTADO"));
			pymes.setTelefonoContacto1(rs.getString("TELEFONO"));
			pymes.setNombreContacto1(rs.getString("NOMBRE"));
			pymes.setAppPaterno1(rs.getString("APELLIDO_PATERNO"));
			pymes.setAppMaterno1(rs.getString("APELLIDo_MATERNO"));
			pymes.setCorreoElectronicoContacto1(rs
					.getString("CORREO_ELECTRONICO"));
			return pymes;

		}
	}

	@SuppressWarnings("unchecked")
	public List<Requerimientos> getRequerimientos(String busqueda,
			String tractoraReq, java.sql.Date fechaDesde,
			java.sql.Date fechaHasta) throws DaoException {
		log.debug("getRequerimientos()");

		StringBuffer query = new StringBuffer();
		query.append("SELECT ");
		query.append("R.ID_REQUERIMIENTO, ");
		query.append("T.EMPRESA, ");
		query.append("R.DESCRIPCION, ");
		query.append("R.FECHA_SUMINISTRO, ");
		query.append("R.FECHA_EXPIRA ");
		query.append("FROM INFRA.TRACTORAS AS T ");
		query.append("LEFT JOIN INFRA.REQUERIMIENTOS AS R ");
		query.append("ON T.ID_USUARIO=R.ID_TRACTORA WHERE ( ");
		StringTokenizer st = new StringTokenizer(busqueda, " ");
		int i = 1;
		while (st.hasMoreElements()) {
			if (i != 1)
				query.append(" OR ");
			query.append("R.PRODUCTO LIKE '%" + st.nextElement() + "%' ");
			i++;
		}
		query.append(" ) AND (T.EMPRESA LIKE '%"
				+ (Null.free(tractoraReq).equals("-1") ? "" : tractoraReq)
				+ "%' ");
		// TODO arreglar sentencia para que despliegue resultados sin fechas
		// (por banderas)
		if (fechaDesde != null) {
			query.append(" AND R.FECHA_SUMINISTRO >= ");
			query.append("'" + fechaDesde + "'");
		}
		if (fechaHasta != null) {
			query.append(" AND R.FECHA_EXPIRA <= ");
			query.append("'" + fechaHasta + "'");
		}
		query.append(" ) ORDER BY T.EMPRESA DESC ");

		log.debug("query=" + query);

		try {
			List<Requerimientos> listReq = getJdbcTemplate().query(
					query.toString(), new RequerimientosPyMEsRowMapper());
			log.debug("result=" + listReq);
			return listReq;

		} catch (Exception e) {
			log.debug("Aquí está e: " + e);
		}
		return null;
	}

	@SuppressWarnings("rawtypes")
	public class RequerimientosPyMEsRowMapper implements RowMapper {

		@Override
		public Object mapRow(ResultSet rs, int ln) throws SQLException {
			RequerimientosPyMEsResultSetExtractor extractor = new RequerimientosPyMEsResultSetExtractor();
			return extractor.extractData(rs);
		}

	}

	@SuppressWarnings("rawtypes")
	public class RequerimientosPyMEsResultSetExtractor implements
			ResultSetExtractor {

		@Override
		public Object extractData(ResultSet rs) throws SQLException,
				DataAccessException {
			Requerimientos req = new Requerimientos();
			req.setIdRequerimiento(rs.getInt("ID_REQUERIMIENTO"));
			req.setNombreTractora(rs.getString("EMPRESA"));
			req.setDescripcion(rs.getString("DESCRIPCION"));
			req.setFechaExpira(rs.getDate("FECHA_SUMINISTRO"));
			req.setFechaExpira(rs.getDate("FECHA_EXPIRA"));
			return req;

		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<Requerimientos> getFechas() throws DaoException {
		log.debug("getFechas()");

		StringBuffer query = new StringBuffer();
		query.append("SELECT ");
		query.append("FECHA_SUMINISTRO, ");
		query.append("FECHA_EXPIRA ");
		query.append("FROM INFRA.REQUERIMIENTOS ");
		query.append("ORDER BY 'FECHA_SUMINISTRO' ASC, ");
		query.append("'FECHA_EXPIRA' DESC ");
		log.debug("query=" + query);

		List<Requerimientos> trac = getJdbcTemplate().query(query.toString(),
				new FechasRowMapper());
		return trac;
	}

	@SuppressWarnings("rawtypes")
	public class FechasRowMapper implements RowMapper {

		@Override
		public Object mapRow(ResultSet rs, int ln) throws SQLException {
			FechasResultSetExtractor extractor = new FechasResultSetExtractor();
			return extractor.extractData(rs);
		}

	}

	@SuppressWarnings("rawtypes")
	public class FechasResultSetExtractor implements ResultSetExtractor {

		@Override
		public Object extractData(ResultSet rs) throws SQLException,
				DataAccessException {
			Requerimientos req = new Requerimientos();
			req.setFechaSuministro(rs.getDate("FECHA_SUMINISTRO"));
			req.setFechaExpira(rs.getDate("FECHA_EXPIRA"));
			return req;
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<Tractoras> getTractoras() throws DaoException {
		log.debug("getTractoras()");

		StringBuffer query = new StringBuffer();
		query.append("SELECT ");
		query.append("EMPRESA ");
		query.append("FROM INFRA.TRACTORAS ");
		query.append("ORDER BY EMPRESA ASC ");
		log.debug("query=" + query);

		List<Tractoras> trac = getJdbcTemplate().query(query.toString(),
				new TractorasRowMapper());
		return trac;
	}

	@SuppressWarnings("rawtypes")
	public class TractorasRowMapper implements RowMapper {

		@Override
		public Object mapRow(ResultSet rs, int ln) throws SQLException {
			TractorasResultSetExtractor extractor = new TractorasResultSetExtractor();
			return extractor.extractData(rs);
		}

	}

	@SuppressWarnings("rawtypes")
	public class TractorasResultSetExtractor implements ResultSetExtractor {

		@Override
		public Object extractData(ResultSet rs) throws SQLException,
				DataAccessException {
			Tractoras tractoras = new Tractoras();
			tractoras.setEmpresa(rs.getString("EMPRESA"));
			return tractoras;
		}
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<Diplomado> getDiplomados() throws DaoException {
		log.debug("getDiplomados()");

		StringBuffer query = new StringBuffer();
		query.append("SELECT ");
		query.append("ID_DIPLOMADO, ");
		query.append("TEMA, ");
		query.append("GENERACION, ");
		query.append("UBICACION, ");
		query.append("FECHA, ");
		query.append("URL ");
		query.append("FROM INFRA.DIPLOMADOS ");
		query.append("ORDER BY ID_DIPLOMADO ASC ");
		log.debug("query=" + query);

		List<Diplomado> dip = getJdbcTemplate().query(query.toString(),
				new DiplomadosRowMapper());
		return dip;
	}

	@SuppressWarnings("rawtypes")
	public class DiplomadosRowMapper implements RowMapper {

		@Override
		public Object mapRow(ResultSet rs, int ln) throws SQLException {
			DiplomadosResultSetExtractor extractor = new DiplomadosResultSetExtractor();
			return extractor.extractData(rs);
		}

	}

	@SuppressWarnings("rawtypes")
	public class DiplomadosResultSetExtractor implements ResultSetExtractor {

		@Override
		public Object extractData(ResultSet rs) throws SQLException,
				DataAccessException {
			Diplomado diplomado = new Diplomado();
			diplomado.setIdDiplomado(rs.getInt("ID_DIPLOMADO"));
			diplomado.setTema(rs.getString("TEMA"));
			diplomado.setGeneracion(rs.getInt("GENERACION"));
			diplomado.setUbicacion(rs.getString("UBICACION"));
			diplomado.setFecha(rs.getDate("FECHA"));
			diplomado.setUrl(rs.getString("URL"));
			return diplomado;
		}
	}

	@Override
	public Documento getArchivo(int id) throws JdbcDaoException {
		log.debug("getArchivo()");

		Documento result = null;
		StringBuffer query = new StringBuffer();
		query.append("SELECT ");
		query.append("ID_ARCHIVO, ");
		query.append("ID_REQUERIMIENTO, ");
		query.append("NOMBRE, ");
		query.append("CONTENIDO ");
		query.append("FROM INFRA.ARCHIVOS ");
		query.append("WHERE ID_ARCHIVO = ? ");
		log.debug("query=" + query);
		log.debug(id);

		Object[] o = { id };
		result = (Documento) getJdbcTemplate().queryForObject(query.toString(),
				o, new DocumentoRowMapper());

		log.debug("result=" + result);
		return result;
	}

	public class DocumentoRowMapper implements RowMapper<Object> {

		@Override
		public Object mapRow(ResultSet rs, int ln) throws SQLException {
			Documento doc = new Documento();
			doc.setIdArchivo(rs.getInt("ID_ARCHIVO"));
			doc.setIdReferencia(rs.getInt("ID_REQUERIMIENTO"));
			doc.setNombre(rs.getString("NOMBRE"));
			doc.setIs(rs.getBinaryStream("CONTENIDO"));

			return doc;
		}
	}

	@SuppressWarnings("unchecked")
	public Domicilios getIdDomicilio() throws DaoException {
		log.debug("getIdDomicilio()");

		Domicilios result = null;
		StringBuffer query = new StringBuffer();

		query.append("SELECT MAX(ID_DOMICILIO) AS MAX_DOMICILIO ");
		query.append("FROM INFRA.DOMICILIOS ");
		log.debug("query=" + query);

		result = (Domicilios) getJdbcTemplate().queryForObject(
				query.toString(), new IdMaxDomiciliosRowMapper());

		log.debug("result=" + result);
		return result;
	}

	@SuppressWarnings("rawtypes")
	public class IdMaxDomiciliosRowMapper implements RowMapper {

		@Override
		public Domicilios mapRow(ResultSet rs, int ln) throws SQLException {
			Domicilios domicilios = new Domicilios();
			domicilios.setIdDomicilio(rs.getInt("MAX_DOMICILIO"));
			return domicilios;
		}
	}

	@SuppressWarnings("unchecked")
	public ServiciosConsultoria getIdConsultoria() throws DaoException {
		log.debug("getIdConsultoria()");

		ServiciosConsultoria result = null;
		StringBuffer query = new StringBuffer();

		query.append("SELECT MAX(ID_CONSULTORIA) AS MAX_CONSULTORIA ");
		query.append("FROM INFRA.SERVICIOS_CONSULTORIA ");
		log.debug("query=" + query);

		result = (ServiciosConsultoria) getJdbcTemplate().queryForObject(
				query.toString(), new IdMaxServConsultoriaRowMapper());

		log.debug("result=" + result);
		return result;
	}

	@SuppressWarnings("rawtypes")
	public class IdMaxServConsultoriaRowMapper implements RowMapper {

		@Override
		public ServiciosConsultoria mapRow(ResultSet rs, int ln)
				throws SQLException {
			ServiciosConsultoria serv = new ServiciosConsultoria();
			serv.setIdConsultoria(rs.getInt("MAX_CONSULTORIA"));
			return serv;
		}
	}

	@SuppressWarnings("unchecked")
	public Respuesta getIdRespuesta() throws DaoException {
		log.debug("getIdRespuesta()");

		Respuesta result = null;
		StringBuffer query = new StringBuffer();

		query.append("SELECT MAX(ID_RESPUESTA) AS MAX_RESPUESTA ");
		query.append("FROM INFRA.RESPUESTAS ");
		log.debug("query=" + query);

		result = (Respuesta) getJdbcTemplate().queryForObject(query.toString(),
				new IdMaxRespuestaRowMapper());

		log.debug("result=" + result);
		return result;
	}

	@SuppressWarnings("rawtypes")
	public class IdMaxRespuestaRowMapper implements RowMapper {

		@Override
		public Respuesta mapRow(ResultSet rs, int ln) throws SQLException {
			Respuesta respuesta = new Respuesta();
			respuesta.setIdRespuesta(rs.getInt("MAX_RESPUESTA"));
			return respuesta;
		}
	}

	public Mensaje saveProductos(Productos productos) throws DaoException {
		log.debug("saveProductos()");

		StringBuffer query = new StringBuffer();
		query.append("INSERT INTO ");
		query.append("INFRA.PRODUCTOS (");
		query.append("ID_USUARIO, ");
		query.append("PRODUCTO) ");
		query.append("VALUES ('");
		query.append(productos.getIdUsuario());
		query.append("', '");
		query.append(productos.getProducto());
		query.append("')");
		log.debug("query=" + query);

		try {
			getJdbcTemplate().update(query.toString());
			return new Mensaje(0,
					"Los datos de Productos han sido registrados exitosamente.");
		} catch (Exception e) {
			log.fatal("ERROR al salvar el producto, " + e);
			return new Mensaje(1,
					"No es posible registrar el producto, intentelo más tarde.");
		}
	}

	public Mensaje updateProducto(Productos productos) throws JdbcDaoException {
		log.debug("updateProducto()");

		StringBuffer query = new StringBuffer();
		query.append("UPDATE ");
		query.append("INFRA.PRODUCTOS SET ");
		query.append("PRODUCTO = '");
		query.append(productos.getProducto());
		query.append("'");
		query.append(" WHERE ID_PRODUCTO = ");
		query.append(productos.getIdProducto());
		query.append(" ");
		log.debug("query=" + query);

		try {
			getJdbcTemplate().update(query.toString());
			return new Mensaje(0,
					"El producto se actualizó satisfactoriamente.");
		} catch (Exception e) {
			log.fatal("ERROR al actualizar el producto, " + e);
			return new Mensaje(1,
					"No es posible actualizar el producto, intentelo más tarde.");
		}
	}

	public Mensaje deleteProducto(Productos productos) throws DaoException {
		log.debug("deleteProducto()");

		StringBuffer query = new StringBuffer();
		query.append("DELETE FROM ");
		query.append("INFRA.PRODUCTOS ");
		query.append("WHERE ID_PRODUCTO = ");
		query.append(productos.getIdProducto());
		log.debug("query=" + query);

		try {
			getJdbcTemplate().update(query.toString());
			return new Mensaje(0, "El producto se eliminó satisfactoriamente.");
		} catch (Exception e) {
			log.fatal("ERROR al eliminar el producto, " + e);
			return new Mensaje(1, "No es posible eliminar el Producto.");
		}

	}

	public Mensaje saveContacto(Contacto contacto) throws DaoException {
		log.debug("saveContacto()");

		StringBuffer query = new StringBuffer();
		query.append("INSERT INTO ");
		query.append("INFRA.CONTACTOS (");
		query.append("ID_USUARIO, ");
		query.append("TIPO, ");
		query.append("NOMBRE, ");
		query.append("APELLIDO_PATERNO, ");
		query.append("APELLIDO_MATERNO, ");
		query.append("CORREO_ELECTRONICO, ");
		query.append("TELEFONO) ");
		query.append("VALUES ('");
		query.append(contacto.getIdUsuario());
		query.append("', '");
		query.append(contacto.getTipo());
		query.append("', '");
		query.append(contacto.getNombre());
		query.append("', '");
		query.append(contacto.getApellidoPaterno());
		query.append("', '");
		query.append(contacto.getApellidoMaterno());
		query.append("', '");
		query.append(contacto.getCorreoElectronico());
		query.append("', '");
		query.append(contacto.getTelefono());
		query.append("')");
		log.debug("query=" + query);

		try {
			getJdbcTemplate().update(query.toString());
			return new Mensaje(0,
					"Los datos del Contacto han sido registrados exitosamente.");
		} catch (Exception e) {
			log.fatal("ERROR al salvar el contacto, " + e);
			return new Mensaje(1,
					"No es posible registrar el contacto, intentelo más tarde.");
		}
	}

	public Mensaje updateContacto(Contacto contacto) throws JdbcDaoException {
		log.debug("updateContactos()");

		StringBuffer query = new StringBuffer();
		query.append("UPDATE ");
		query.append("INFRA.CONTACTOS SET ");
		query.append("TIPO = '");
		query.append(contacto.getTipo());
		query.append("', ");
		query.append("NOMBRE = '");
		query.append(contacto.getNombre());
		query.append("', ");
		query.append("APELLIDO_PATERNO = '");
		query.append(contacto.getApellidoPaterno());
		query.append("', ");
		query.append("APELLIDO_MATERNO = '");
		query.append(contacto.getApellidoMaterno());
		query.append("', ");
		query.append("CORREO_ELECTRONICO = '");
		query.append(contacto.getCorreoElectronico());
		query.append("', ");
		query.append("TELEFONO = '");
		query.append(contacto.getTelefono());
		query.append("'");
		query.append(" WHERE ID_CONTACTO = ");
		query.append(contacto.getIdContacto());
		log.debug("query=" + query);

		try {
			getJdbcTemplate().update(query.toString());
			return new Mensaje(0,
					"El producto se actualizó satisfactoriamente.");
		} catch (Exception e) {
			log.fatal("ERROR al actualizar el producto, " + e);
			return new Mensaje(1,
					"No es posible actualizar el producto, intentelo más tarde.");
		}
	}

	public Mensaje deleteContacto(Contacto contacto) throws DaoException {
		log.debug("deleteContacto()");

		StringBuffer query = new StringBuffer();
		query.append("DELETE FROM ");
		query.append("INFRA.CONTACTOS ");
		query.append("WHERE ID_CONTACTO = ");
		query.append(contacto.getIdContacto());
		log.debug("query=" + query);

		try {
			getJdbcTemplate().update(query.toString());
			return new Mensaje(0, "El contacto se eliminó satisfactoriamente.");
		} catch (Exception e) {
			log.fatal("ERROR al eliminar el contacto, " + e);
			return new Mensaje(1,
					"No es posible eliminar el contacto, intentelo más tarde.");
		}

	}

	public Mensaje saveClientes(Clientes clientes) throws DaoException {
		log.debug("saveClientes()");

		StringBuffer query = new StringBuffer();
		query.append("INSERT INTO ");
		query.append("INFRA.CLIENTES  (");
		query.append("ID_USUARIO, ");
		query.append("CLIENTE, ");
		query.append("PRODUCTOS_COMPRA, ");
		query.append("ANIOS_PROVEEDOR, ");
		query.append("MESES_PROVEEDOR) ");
		query.append("VALUES ('");
		query.append(clientes.getIdUsuario());
		query.append("', '");
		query.append(clientes.getCliente());
		query.append("', '");
		query.append(clientes.getProductosCompra());
		query.append("', '");
		query.append(clientes.getAniosProveedor());
		query.append("', '");
		query.append(clientes.getMesesProveedor());
		query.append("')");
		log.debug("query=" + query);

		try {
			getJdbcTemplate().update(query.toString());
			return new Mensaje(0,
					"Los datos han sido registrados exitosamente.");
		} catch (Exception e) {
			log.fatal("ERROR al salvar los datos CLIENTES, " + e);
			return new Mensaje(1, "No es posible registrar los datos.");
		}
	}

	public Mensaje updateCliente(Clientes clientes) throws JdbcDaoException {
		log.debug("updateCliente()");

		StringBuffer query = new StringBuffer();
		query.append("UPDATE ");
		query.append("INFRA.CLIENTES SET ");
		query.append("CLIENTE = '");
		query.append(clientes.getCliente());
		query.append("', ");
		query.append("PRODUCTOS_COMPRA = '");
		query.append(clientes.getProductosCompra());
		query.append("', ");
		query.append("ANIOS_PROVEEDOR = '");
		query.append(clientes.getAniosProveedor());
		query.append("', ");
		query.append("MESES_PROVEEDOR = '");
		query.append(clientes.getMesesProveedor());
		query.append("'");
		query.append(" WHERE ID_CLIENTE = ");
		query.append(clientes.getIdCliente());
		query.append(" ");
		log.debug("query=" + query);

		try {
			getJdbcTemplate().update(query.toString());
			return new Mensaje(0,
					"Los datos del clientes se actualizaron satisfactoriamente.");
		} catch (Exception e) {
			log.fatal("ERROR al actualizar los datos del CLIENTE, " + e);
			return new Mensaje(1,
					"No es posible actualizar los datos del cliente, intentelo más tarde.");
		}
	}

	public Mensaje deleteCliente(Clientes clientes) throws DaoException {
		log.debug("deleteCliente()");

		StringBuffer query = new StringBuffer();
		query.append("DELETE FROM ");
		query.append("INFRA.CLIENTES ");
		query.append("WHERE ID_CLIENTE = ");
		query.append(clientes.getIdCliente());
		log.debug("query=" + query);

		try {
			getJdbcTemplate().update(query.toString());
			return new Mensaje(0, "El cliente se eliminó satisfactoriamente.");
		} catch (Exception e) {
			log.fatal("ERROR al eliminar el cliente, " + e);
			return new Mensaje(1, "No es posible eliminar el cliente.");
		}

	}

	public Mensaje insertDocumento(Documento documento) throws DaoException {
		log.debug("insertDocumento()");

		StringBuffer query = new StringBuffer();
		query.append("INSERT INTO ");
		query.append("INFRA.ARCHIVOS( ");
		query.append("ID_RESPUESTA, ");
		query.append("MIME, ");
		query.append("NOMBRE, ");
		query.append("TIPO, ");
		query.append("CONTENIDO, ");
		query.append("DESCRIPCION_ARCHIVO)");
		query.append("VALUES( ?, ?, ?, ?, ?, ? )");
		log.debug("query=" + query);
		log.debug("documento: " + documento);

		PreparedStatement ps = null;
		try {
			getConnection().setAutoCommit(false);
			ps = getConnection().prepareStatement(query.toString());
			ps.setInt(1, documento.getIdReferencia());
			ps.setString(2, documento.getMimeType(documento.getNombre()));
			ps.setString(3, documento.getNombre());
			ps.setString(4, documento.getFileType(documento.getNombre()));
			ps.setBlob(5, documento.getIs());
			ps.setString(6, documento.getDescripcionArchivo());
			ps.executeUpdate();
			getConnection().commit();

			return new Mensaje(0,
					"El Documento se dio de alta satisfactoriamente.");
		} catch (SQLException sqle) {
			try {
				getConnection().rollback();
			} catch (Exception e) {
				log.fatal("Error SQL al hacer rollback en la conexion." + e);
				e.printStackTrace();
			}
			log.fatal("Error SQL al intentar insertar el documento." + sqle);
			sqle.printStackTrace();
		} finally {
			try {
				ps.close();
				getConnection().setAutoCommit(false);
				getConnection().close();
			} catch (SQLException sqle) {
				log.fatal("Error SQL al intentar cerrar la conexion hacia la BD."
						+ sqle);
				sqle.printStackTrace();
			}
		}

		return new Mensaje(1, "No es posible guradar el Documento.");

	}
}